var KEY_TABLE_LS = "localStrg",
    KEY_TABLE_ITEMS = "tableParams",
    KEY_TABLE_CONTENT = "queryData",
    KEY_LS_SHOWCOLS = "showCols",
    KEY_LS_RESETCOLS = "resetCols",
    KEY_LS_VERSION = "version",
    gridbordercolor = "#eee";

var InitiateEasyPieChart = function () {
    return {
        init: function () {
            var easypiecharts = $('[data-toggle=easypiechart]');
            $.each(easypiecharts, function () {
                var barColor = getcolor($(this).data('barcolor')) || themeprimary,
                    trackColor = getcolor($(this).data('trackcolor')) || false,
                    scaleColor = getcolor($(this).data('scalecolor')) || false,
                    lineCap = $(this).data('linecap') || "round",
                    lineWidth = $(this).data('linewidth') || 3,
                    size = $(this).data('size') || 110,
                    animate = $(this).data('animate') || false;

                $(this).easyPieChart({
                    barColor: barColor,
                    trackColor: trackColor,
                    scaleColor: scaleColor,
                    lineCap: lineCap,
                    lineWidth: lineWidth,
                    size: size,
                    animate : animate
                });
            });
        }
    };
}();

var InitiateEasyPiePartChart = function () {
    return {
        init: function ($container) {
            var easypiecharts = $container.find('[data-toggle=easypiechart]');
            $.each(easypiecharts, function () {
                var barColor = getcolor($(this).data('barcolor')) || themeprimary,
                    trackColor = getcolor($(this).data('trackcolor')) || false,
                    scaleColor = getcolor($(this).data('scalecolor')) || false,
                    lineCap = $(this).data('linecap') || "round",
                    lineWidth = $(this).data('linewidth') || 3,
                    size = $(this).data('size') || 110,
                    animate = $(this).data('animate') || false;

                $(this).easyPieChart({
                    barColor: barColor,
                    trackColor: trackColor,
                    scaleColor: scaleColor,
                    lineCap: lineCap,
                    lineWidth: lineWidth,
                    size: size,
                    animate : animate
                });
            });
        }
    };
}();


/**
 * 基于Baidu Echarts的图表应用
 * @date 2017.06.16
 * @author gaoyouan https://github.com/EmeraldDreamland
 *
 *
 *
 */
var EouCharts = {};

/**
 * 饼图1：带栏目 & 仅显示topX
 * @param dom
 * @param params 期望结构：
 *      {
 *          name: tooltip名称,
 *          title: 标题（左上方显示，可选项）
 *          data/url&query: 本地数据或远程数据
 *          nameLen: 左侧栏目的个数
 *          #data结构：array|[Object{name,value}]
 *              eg: [
 *                  {name:"", value: number},
 *                  ...
 *              ]
 *      }
 */
EouCharts.pie4Top10 = function( dom, params ){
    EouCharts._init(dom, params, function(params, data){
        var len = data.length,
            nameData = [],
            nameLen = params.nameLen || 10,
            result = [];
        // //去除影响显示的值
        // for(var k=0; k<data.length; k++){
        //     if( data[k].name===undefined || data[k].name==="" || data[k].value===undefined){
        //         data.splice(k,1);
        //         k--;
        //     }
        // }
        if (len <= nameLen) {
            for( var i=0; i<len; i++){
                nameData.push(data[i].name);
            }
        }else{
            var restValue = 0;
            for( var j=0; j<len; j++){
                if (j <= (nameLen - 2)) {
                    nameData.push(data[j].name);
                    result.push(data[j]);
                }else{
                    restValue += data[j].value;
                }
            }
            nameData.push(getJsonData("label.common.rests"));
            result.push( {name:getJsonData("label.common.rests"), value:restValue} );
            data = result;
        }

        var option = {
            tooltip: {
                trigger: 'item',
                formatter: "{a} <br/>{b}: {c} ({d}%)"
            },
            color:["#3598dc","#e85617",'#9060e8','#916f5a','#11c19a','#f7b527'],
            legend: {
                orient: 'vertical',
                left: 'right',
                top: 120,
                data: nameData,
                textStyle:{
                    color:"#636363"
                }
            },
            series: [
                {
                    name: params.name,
                    type: 'pie',
                    radius: ['55%', '45%'],
                    center: ["40%", "50%"],
                    avoidLabelOverlap: false,
                    label: {
                        normal: {
                            show: false,
                            position: 'center',
                            formatter: "{b}\n{c} ({d}%)"
                        },
                        emphasis: {
                            show: true,
                            textStyle: {
                                fontSize: '12',
                                fontWeight: 'bold'
                            }
                        }
                    },
                    labelLine: {
                        normal: {
                            show: false
                        }
                    },
                    data: data
                }
            ]
        };
        if( params.title ){
            option.title = {
                text: params.title,
                left: "left",
                textStyle: {
                    fontSize: 14
                }
            };
        }
        if (params.color) {
            option.color = params.color;
        }
        return option;
    });
};

/**
 * 省会级别的中国地图
 */
EouCharts.chinaMapAtProvince = function( dom, params ){
    EouCharts._init(dom, params, function(params, data){
        var max = 0;
        for( var i=0,len=data.length; i<len; i++){
            var name = data[i].name, value = data[i].value;
            if(name){
                var areas = name.split("."),
                    areaName = areas.length === 1 ? getJsonData("cn.region." + areas[0]) : "",
                    region = areas.length >= 4 ? getJsonData("cn.region." + areas[3]) : "";
                // country = areas.length >= 3 ? getJsonData("country."+areas[2]) : "";
                name = areaName || region;
            }
            data[i].name = name || getJsonData("cn.region.beijing");
            if (value) {
                if (params.ratio) {
                    data[i].value = value = div(value ,params.ratio).toFixed(3);
                }
                max = value > max ? parseInt(value) : max;
            }
        }
        var option = {
            /*backgroundColor: '#004882',*/
            backgroundColor: '#fff',
            tooltip: {
                trigger: 'item',
                formatter: params.formatter || function (params) {
                    if (!params || !params.value) {
                        return undefined;
                    }
                    return params.name + ' : ' + params.value;
                }
            },
            visualMap: {
                show:true,
                min: 0,
                max: max + 100,
                left: 'left',
                top: 'bottom',
                calculable: true,
                inRange: {
                    color: ['#0564af', '#033257']
                },
                textStyle: {
                    color: '#fff'
                }
            },
            toolbox: {
                show: true,
                // orient: 'vertical',
                left: 'right',
                top: 'top',
                feature: {
                    dataView: {readOnly: false},
                    restore: {},
                    saveAsImage: {}
                }
            },
            // geo: {
            //     map: 'china',
            //     label: {
            //         normal: {
            //             show: false
            //         },
            //         emphasis: {
            //             show: false
            //         }
            //     },
            //     roam: true,
            //     itemStyle: {
            //         normal: {
            //             areaColor: '#323c48',
            //             borderColor: '#404a59'
            //         },
            //         emphasis: {
            //             areaColor: '#2a333d',
            //             borderColor: '#fff',
            //             borderWidth: 1
            //         }
            //     }
            // },
            series: [
                {
                    name: params.name,
                    type: 'map',
                    mapType: 'china',
                    data: data,
                    roam: false,
                    zoom: 1.2,
                    symbolSize: 12,
                    label: {
                        normal: {
                            show: false
                        },
                        emphasis: {
                            show: false
                        }
                    },
                    itemStyle: {
                        normal: {
                            areaColor: '#004882',
                            borderColor: '#1389bf'
                        },
                        emphasis: {
                            areaColor: 'rgb(24, 133, 182)'
                        }
                    }
                    /*itemStyle: {
                        normal: {
                            areaColor: '#323c48',
                            borderColor: '#404a59'
                        },
                        emphasis: {
                            areaColor: '#2a333d',
                            borderColor: '#fff',
                            borderWidth: 1
                        }
                    }*/
                }
            ]
        };
        if( params.title ){
            option.title = {
                text: params.title,
                left: "left",
                textStyle: {
                    fontSize: 14,
                    color: '#fff'
                }
            };
        }
        return option;
    });
};

/**
 * 内部主入口实现
 * @param dom
 * @param params
 * @param callback
 * @private
 * @return option for echarts
 */
EouCharts._init = function(dom, params, callback){
    if( !dom || !params || !callback || !(params.data||params.url)){
        layer.msg.error("Params local data or remote url is missing, check please.");
    }
    var myChart = echarts.getInstanceByDom(dom) ?
        echarts.getInstanceByDom(dom) :
        echarts.init(dom, params.theme||'walden');
    if( params.data){
        myChart.setOption(callback(params, params.data));
        $(window).resize(function () {
            myChart.resize();
        });
    }else{
        EouCharts._ajax({
            url: params.url,
            query: params.query || {},
            success: function(data){
                if( !data || !callback ){
                    return ;
                }
                myChart.setOption(callback(params, data));
            }
        }, myChart);
    }
};

/**
 * 内部用于echarts的ajax请求方法
 * @param params:
 *  {
 *      url: 请求地址,
 *      query: 请求参数|Object,
 *      success: function(data){ } >> 绘制/更新echarts
 *      其他参数不重要...
 *  }
 */
EouCharts._ajax = function(params, myChart){
    myChart && myChart.showLoading();
    $.ajax({
        url: params.url,
        type: params.type || "post",
        timeout: params.timeout || 20000,
        data: params.query || {},
        contentType: params.contentType, //设置请求头信息
        dataType: params.dataType || "json",
        success: function (res) {
            myChart.hideLoading();
            if( !res || !res.data ){
                return;
            }
            if (params.success) params.success(res.data);
        }
    });

};


/**
 * 与EOU业务相关的工具类
 *
 * @version
 * @Author
 * @license
 */
var EouUtils = {};

/**
 * transform 地区数据 to 地区名称
 * @param keyAreaId
 *      格式：u.@continent.@country.@region.@city
 *      层层筛选，显示出最小粒度且有效的地区
 * @param ignoreCountry 是否不显示国家名
 *      type: boolean
 *
 * @notice 目前只有中国，才有地区和城市
 * @return string 地区名称
 */
EouUtils.formatArea = function (keyAreaId, ignoreCountry) {
    if (keyAreaId && keyAreaId !== "N") {
        var areas = keyAreaId.split("."),
            country = getJsonData("country." + areas[2]),
            region = getJsonData("cn.region." + areas[3]),
            regionAndCity = getJsonData("cn." + areas[3] + "." + areas[4]),
            result = "";
        if (country) {
            result += ignoreCountry ? "" : country;
            //优先{regionAndCity},查不到再检查region
            if (regionAndCity) {
                result += (ignoreCountry ? "" : "-") + regionAndCity.replace(".", "-");
            } else if (region) {
                result += (ignoreCountry ? "" : "-") + region;
            }
        }
    }
    return result || "-";
};

/**
 * 逻辑同EouUtils.formatArea，
 * @return string 带国旗图标的地区名称（html）
 */
EouUtils.formatAreaWithFlag = function (keyAreaId) {
    var result = EouUtils.formatArea(keyAreaId);
    if (result && result !== "-") {
        result = "<span><i class='img-country country-" + keyAreaId.split(".")[2] + "'></i>" + result + "</span>";
    }
    return result || "-";
};

/**
 * transform 地区城市拼音 to 地区城市名称
 * @param keyAreaId
 *      格式：@region.@city
 * @return string 地区城市名称
 */
EouUtils.formatRegionAndCity = function (keyAreaId) {
    if (keyAreaId && keyAreaId !== "N") {
        var areas = keyAreaId.split("."),
            region = getJsonData("cn.region." + areas[0]),
            regionAndCity = getJsonData("cn." + areas[0] + "." + areas[1]),
            result = "";
        if (regionAndCity) {
            result += "-" + regionAndCity.replace(".", "-");
        } else if (region) {
            result += "-" + region;
        }
    }
    return result || "-";
};


/**
 * 价格格式化
 *    保持小数位一致，默认统一2位
 * @param value 价格
 * @quote etable插件
 */
EouUtils.formatPriceHighLight = function(value) {
    var valSplit = value.toString().split("."),
        decimals = valSplit && valSplit.length === 2 ? valSplit[1].length : 0;
    switch (decimals) {
        case 0 :
            value += ".00";
            break;
        case 1 :
            value += "0";
            break;
        default:
            value = Math.ceil(value * 100) / 100;
    }
    return '<span class="label label-info" style="width:80px;text-align:right;">' + value + '</span>';
};
EouUtils.formatPrice = function(value, style) {
    var valSplit = value.toString().split("."),
        decimals = valSplit && valSplit.length === 2 ? valSplit[1].length : 0;
    switch (decimals) {
        case 0 :
            value += ".00";
            break;
        case 1 :
            value += "0";
            break;
        default:
            value = Math.ceil(value * 100) / 100;
    }
    return '<div style="width:80px;text-align:right;">' + value + '</div>';
};





/******************************** 工具类：单位转换，格式转换 ***************************************************/

/**
 * 时间格式化：从{秒}转换为{天数+时间}
 * @param timeVal
 * @returns {string}
 */
EouUtils.formatTimeSec2Day = function(timeVal) {
    timeVal = parseInt(timeVal); //parseInt(timeVal/1000);
    if ( !timeVal || timeVal ==="NaN" || timeVal<0) {
        timeVal = 0;
    }
    var result = "";
    if (timeVal >= 24 * 3600) {
        result += parseInt(timeVal / (24 * 3600)) + "D ";
        timeVal = timeVal % (24 * 3600);
    }
    if(timeVal >=0 && timeVal <60){
        result += "00:00:" + (timeVal < 10 ? ("0" + parseInt(timeVal)) : parseInt(timeVal));
    }else if (timeVal >= 60) {
        if (timeVal >= 3600) {

            result += (parseInt(timeVal / 3600) < 10 ? ("0" + parseInt(timeVal / 3600)) : parseInt(timeVal / 3600)) + ":";
            if (timeVal % 3600 > 0) {
                var t1 = timeVal % 3600;
                result += (parseInt(t1 / 60) < 10 ? ("0" + parseInt(t1 / 60)) : parseInt(t1 / 60)) + ":";
                if (t1 % 60 > 0) {
                    result += (t1 % 60 < 10 ? ("0" + t1 % 60) : t1 % 60);
                } else {
                    result += "00";
                }
            } else {
                result += "00:00";
            }
        } else {
            result += "00:" + (parseInt(timeVal / 60) < 10 ? ("0" + parseInt(timeVal / 60)) : parseInt(timeVal / 60)) + ":";
            if (timeVal % 60 > 0) {
                result += (timeVal % 60 < 10 ? ("0" + timeVal % 60) : timeVal % 60);
            } else {
                result += "00";
            }
        }
    }
    return result;
};


/**
 * 将I18N-comData转化成Object
 * eg: [["a","b","c"],[1,2,3]] >> {a:{text:"b", color:"c"}, 1:{text:2,color:3}}
 *
 */
EouUtils.tranI18NDataToObj = function( i18nKey){
    var comData = getJsonData(i18nKey),
        result = {};
    if( isArray(comData)){
        for( var i=0,len=comData.length; i<len; i++){
            var data = comData[i];
            result[data[0]] = {};
            result[data[0]].text = data[1];
            result[data[0]].color = data[2];
        }
        return result;
    }
    return undefined;
};

/**************************************************  ajax   **********************************************************/
/**
 * 解析uri的参数，组合成对象
 *
 * format：http...?param1=value1&param2=value2
 * return：  {param1:value1,param2:value2}
 *
 * @tips $name特别指定为标签页名称，其他未字段名
 *
 * @param uri
 * @returns {{}}
 */
EouUtils.uriParamsObj = function(uri){
    var obj = {};
    if( uri && typeof uri === "string" && uri.contains("?")){
        var uriAry = uri.split("?");
        if(uriAry.length >= 2){
            uriAry = uriAry[1].split("&");
            for( var i = 0; i<uriAry.length; i++ ){
                var keyValue = uriAry[i].split("=");
                if(keyValue.length === 2 && keyValue[0] && keyValue[1]){
                    obj[keyValue[0]] = keyValue[1];
                }
            }
        }
    }
    return obj;
};



/**
 * 克隆一个对象
 * @param Obj
 * @returns
 */
EouUtils.clone = function(Obj) {
    var buf;
    if (Obj instanceof Array) {
        buf = [];                    //创建一个空的数组
        var i = Obj.length;
        while (i--) {
            buf[i] = EouUtils.clone(Obj[i]);
        }
        return buf;
    }else if (Obj instanceof Object){
        buf = {};                   //创建一个空对象
        for (var k in Obj) {           //为这个对象添加新的属性
            buf[k] = EouUtils.clone(Obj[k]);
        }
        return buf;
    }else{                         //普通变量直接赋值
        return Obj;
    }
};


/** ***************************************************************************************/
/**
 * 暂存的一些工具类
 */
var CommonUtils = {};

/**
 * 截取指定长度的字符串，用于缩略显示，简要内容
 *
 * @param str
 * @param length
 */
CommonUtils.interceptStr = function(str, len){
    len = typeof len == "number" &&  len>0 ?len : 5;
    //需要去除“<>”的内容，去除样式
    //...
    if( str.length > len){
        str = str.substring(0, len) + "...";
    }
    return str;
};


/**
 * jQuery判断空对象的方法
 * @param e object
 */
function isEmptyObject(e) {
    var t;
    for (t in e)
        return !1;
    return !0
}

/**
 * jQuery判断数组的方法
 * @param obj
 * @returns {boolean}
 */
function isArray(obj) {
    return Object.prototype.toString.call(obj) === '[object Array]';
}

/**
 * 忽略大小写比较字符串
 */
var compareStrIngoreCase = function(val1, val2){
    if((val1 === undefined || val1 === "") || (val2 === undefined || val2 === "")){
        return false;
    }else if(typeof val1 ==="string" && typeof val2 ==="string" && val1.toLowerCase() === val2.toLowerCase()){
        return true;
    }else if(val1.toString() === val2.toString()){
        return true;
    }
    return false;
};
/**
 *  流量格式化，初始单位KB
 * @param value
 */
function trafficUnitFM(value){
    if( !value || typeof value !== "number")
        return 0;
    if( value<Math.pow(10,3)){
        return value +"KB";
    } else if(value<Math.pow(10,6)){
        return parseInt(value/10)/100+"MB";
    } else if(value <= Math.pow(10,9)){
        return parseInt(value/Math.pow(10,4))/100+"GB";
    } else if(value <=Math.pow(10,12)){
        return parseInt(value/Math.pow(10,7))/100+"TB";
    } else {
        return parseInt(value/Math.pow(10,10))/100+"PB";
    }
}

//...一些还未归类的方法
function toDecimal(x, y) {
    var f = parseFloat(x);
    if (isNaN(f)) {
        return x;
    }
    var f = Math.round(x * 10) / 10;
    if (y === 2) {
        f = Math.round(x * 100) / 100;
    }
    var s = f.toString();
    var rs = s.indexOf('.');
    if (rs < 0) {
        rs = s.length;
        s += '.';
    }
    while (s.length <= rs + y) {
        s += '0';
    }
    return s;
}

/**
 * 暂用：
 * @param tableId
 * @returns {number}
 */
EouUtils.getSelectedRowID = function(tableId) {
    var queryData = $("#" + tableId).data("queryData"),
        number = 0;
    var checkedRows = $("#" + tableId + "-body").find("input[name*=" + tableId + "-rowItems]:checked");
    if (checkedRows && checkedRows.length > 0) {
        var value = checkedRows[0].value.split("-|-");
        number = value[0];
    }
    return number;
};

/**
 * 基于框架的自定义html组件
 *
 * @based-on
 *      jquery >> bootstrap >> beyond 依次依赖
 *      layer弹窗
 */

var EouWidget = {};

/**
 * 组件：Top排名
 *
 * @param params Object
 * #key     #type     #value                    #description
 * data     arr       {name:..,value:...}              单元：{name:..,value:...}
 * length      int       默认5                      数据总数
 * style    string    ""                        每条数据的附加style
 * moreE    function   fun(data)                 更多按钮点击事件: 数据为每个单元数据
 * itemE    function   fun(data)                每条数据的点击事件: 数据为每个单元数据
 *
 * @return {jQuery}
 */
EouWidget.rankX = function (params) {
    params = params && typeof params === 'object' ? params : {};
    var data = params.data || [],
        len = params.length || 5,
        style = params.style || "height:21px;line-height:21px;",
        listHtml = [];
    var $container = $([
        '<div class="orders-container" style="background-color: #FBFBFB;">',
        '<ul class="orders-list">',//position:inherit;
        '<li class="order-item">',
        '<div class="row" style="height:21px;line-height:21px">',
        '<div class="col-xs-4 col-xs-offset-8 item-right">',
        '<button class="btn btn-primary btn-sm pull-right" >',
        getJsonData("more"),
        '</button></div></div></li></ul></div>'
    ].join(''));
    for (var i = 0; i < len; i++) {
        listHtml.push('<li class="order-item"><div class="row" style="' + style + 'font-size:12px;">' +
            '<div class="col-xs-8 item-left"><span class="item-booker">' + (data[i] ? data[i].name : '-' ) + '</span></div>' +
            '<div class="col-xs-4 item-right"><span class="item-booker">' + (data[i] ? data[i].value : '' ) + '</span></div></div></li>');
    }
    $container.find("ul").prepend(listHtml.join(''));
    if (params.moreE && typeof params.moreE === 'function') {
        $container.find('button').on('click', function () {
            params.moreE();
        })
    }
    return $container;
};
/**
 * 组件：top排名-构建DOM
 * @param params object
 * {
 *      length
 *      style
 *      moreE
 *      itemE
 *      }
 */
EouWidget.rankXDom = function(params){
    params = params && typeof params === 'object' ? params : {};
    var len = params.length || 5,
        style = params.style || "height:21px;line-height:21px;",
        listHtml = [];
    var $container = $([
        '<div class="orders-container" style="background-color: #FBFBFB;">',
        '<ul class="orders-list">',//position:inherit;
        '<li class="order-item">',
        '<div class="row" style="height:21px;line-height:21px">',
        '<div class="col-xs-4 col-xs-offset-8 item-right">',
        '<button class="btn btn-primary btn-sm pull-right" >',
        getJsonData("more"),
        '</button></div></div></li></ul></div>'
    ].join(''));
    for (var i = 0; i < len; i++) {
        listHtml.push('<li class="order-item"><div class="row" style="' + style + 'font-size:12px;">' +
            '<div class="col-xs-8 item-left"><span class="item-booker"></span></div>' +
            '<div class="col-xs-4 item-right"><span class="item-booker"></span></div></div></li>');
    }
    $container.find("ul").prepend(listHtml.join(''));
    if (params.moreE && typeof params.moreE === 'function') {
        $container.find('button').on('click', function () {
            params.moreE();
        })
    }
    return $container;
};
/**
 * 组件：top排名-填充数据
 * @param params
 * @container rankXDom返回的jQuery对象
 */
EouWidget.rankXData = function( $container, data){
    data = data && isArray(data) ? data : [];
    $container.find("li").each(function(index, item){
       $(this).find(".item-left>span").html(data[index] ? data[index].name : '-');
        $(this).find(".item-left>span").html(data[index] ? data[index].value : '-');
    });
};


/**
 * TOP排名
 * @废弃
 *
 * @param params
 *     {
 *          data: {name\String, value\String Or Number},
 *          class: String,
 *          callback: function
 *     }
 *
 * @param styleClass
 *            css样式类，主要设置每行的高度
 * @param tabId/toolsId/tabBtnId:
 *            switchTabAndTools方法的三个参数，用于更多按钮点击时切换tab页面。
 * @returns {String}
 */
EouWidget.getTopRankHtml = function (tops, styleClass, tabId, toolsId, tabBtnId,forwardUrl){
    /*var topDivHtml = "<div class='orders-container' style='position:inherit;'><ul class='orders-list' style=''>";
    for(var i = 0; i<tops.length; i++){
        topDivHtml +="<li class=\"order-item\"><div class=\"row "+ styleClass +"\"><div class=\"col-lg-8 col-md-8 col-sm-8 col-xs-8 item-left\"><span class=\"item-booker\">";
        topDivHtml +=tops[i].name+"</span></div><div class=\"col-lg-4 col-md-4 col-sm-4 col-xs-4 item-right\"><div class=\"item-booker\" style=\"text-align: right;\"><span class=\"currency\">";
        topDivHtml += tops[i].value+"</span><span class=\"price\">";
        topDivHtml +="</span></div></div></div></li>";
    }
    for ( var i = tops.length; i < 10; i++) {
        topDivHtml +="<li class=\"order-item\"><div class=\"row "+ styleClass +"\"><div class=\"col-lg-8 col-md-8 col-sm-8 col-xs-8 item-left\"><span class=\"item-booker\">-";
        topDivHtml +="</span></div><div class=\"col-lg-4 col-md-4 col-sm-4 col-xs-4 item-right\"><div class=\"item-booker\" style=\"text-align: right;\"><span class=\"currency\">";
        topDivHtml +="</span><span class=\"price\"></span></div></div></div></li>";
    }
    topDivHtml +="<li class=\"order-item\"><div class=\"row\" style=\"height:21px;line-height:21px\"><div class=\"col-lg-8 col-md-8 col-sm-8 col-xs-8 item-left\"><span class=\"item-booker\">";
    topDivHtml +="</span></div><div class=\"col-lg-4 col-md-4 col-sm-4 col-xs-4 item-right\"><div class=\"item-booker\" style=\"text-align: right;\"><span class=\"currency\">";
    topDivHtml +="</span><span class=\"price\"><button class=\"btn btn-primary btn-sm pull-right\" onclick='switchTabAndTools(\""+tabId+"\",\""+toolsId+"\",\""+tabBtnId+"\")'>"
        +getJsonData("status.cdrNew.info29")+"</button></span></div></div></div></li>";
    topDivHtml +="</ul></div>";*/
    var forwardUrls = forwardUrl ? forwardUrl:"";
    var topDivHtml = "<div class='orders-container' style='position:inherit;'><ul class='orders-list' style=''>";
    for(var i = 0; i<tops.length; i++){
        topDivHtml +="<li class=\"order-item\"><div class=\"row "+ styleClass +"\"><div class=\"col-lg-8 col-md-8 col-sm-8 col-xs-8 item-left\"><span class=\"item-booker\">";
        topDivHtml +=tops[i].name+"</span></div><div class=\"col-lg-4 col-md-4 col-sm-4 col-xs-4 item-right\"><div class=\"item-booker\" style=\"text-align: right;\"><span class=\"currency\">";
        topDivHtml += tops[i].value+"</span><span class=\"price\">";
        topDivHtml +="</span></div></div></div></li>";
    }
    for ( var i = tops.length; i < 10; i++) {
        topDivHtml +="<li class=\"order-item\"><div class=\"row "+ styleClass +"\"><div class=\"col-lg-8 col-md-8 col-sm-8 col-xs-8 item-left\"><span class=\"item-booker\">-";
        topDivHtml +="</span></div><div class=\"col-lg-4 col-md-4 col-sm-4 col-xs-4 item-right\"><div class=\"item-booker\" style=\"text-align: right;\"><span class=\"currency\">";
        topDivHtml +="</span><span class=\"price\"></span></div></div></div></li>";
    }
    topDivHtml +="<li class=\"order-item\"><div class=\"row\" style=\"height:21px;line-height:21px\"><div class=\"col-lg-8 col-md-8 col-sm-8 col-xs-8 item-left\"><span class=\"item-booker\">";
    topDivHtml +="</span></div><div class=\"col-lg-4 col-md-4 col-sm-4 col-xs-4 item-right\"><div class=\"item-booker\" style=\"text-align: right;\"><span class=\"currency\">";
    topDivHtml +="</span><span class=\"price\"><button class=\"btn btn-primary btn-sm pull-right\" onclick='forwardUrl(\""+forwardUrls+"\")'>"
        +getJsonData("status.cdrNew.info29")+"</button></span></div></div></div></li>";
    topDivHtml +="</ul></div>";
    return topDivHtml;
};


function forwardUrl(url) {
    if (url){
        window.location.href = url;
    }
}
// //不是很好
// EouWidget.outlineDom = function(domID, length, style){
//     var container = document.getElementById(domID),
//         cls = container.getAttribute("class").concat(" outlineInfo"),
//         dom = [];
//     container.setAttribute("class", cls);
//     for( var i=0; i<length; i++){
//         dom.push()
//     }
//
// };



EouWidget.switchTabs = function(tableId, toolsId, tabBtnId){
    var $table = $("#"+tableId);
    if($table.length>0){
        if( $table.hasClass("flag-table-init")){
            queryTableDataModel(tableId, '1');
        }else{
            InitTableModuleWithId(tableId);
        }
    }
    $(".flag-tools").hide();
    $(".flag-tabs").hide();
    if(tableId)
        $table.show();
    if(toolsId)
        $("#"+toolsId).show();
    if(tabBtnId){// 适配“更多”按钮
        $(".flag-tabs-btn").removeClass("active");
        $("#"+tabBtnId).addClass("active");
    }
};


function getJsonData(parameter) {
    if (!localStorage.getItem("JsonData")){
        $.ajaxSettings.async = false;
        $.getJSON("/static/language/zh_CN.json", function (data){
            var dataJson = JSON.stringify(data);
            localStorage.setItem("JsonData",dataJson);
        })
        $.ajaxSettings.async = true;
    }

    var data = JSON.parse(localStorage.getItem("JsonData"));
    try{
        return eval("data."+parameter)[""];
    }catch(e){
        console.log("getJsonError");
    }
    
}


function isEmptyObject(e) {
    var t;
    for (t in e)
        return !1;
    return !0
}


function titleCase(str) {
    return (str.replace(/\s[a-z]/g,function($1){
        return $1.toLocaleUpperCase()
    }).replace(/^[a-z]/,function($1){
        return $1.toLocaleUpperCase()
    }))
}



function isArray(obj) {
    return Object.prototype.toString.call(obj) === '[object Array]';
}

function initTableWithParamsObj(tableId, obj){

}


function InitTableMoudle(tableId, toolsAreaId, urlPrefix, params, permissions, page, customSearchWidget) {
    if (params) {
        params.initParams = {};
        params.initParams.tableId = tableId;
        params.initParams.toolsId = toolsAreaId;
        params.initParams.urlPrefix = urlPrefix;
        params.initParams.permissions = permissions;
        params.initParams.page = page;
    }
    if (CheckAndInitStorage(params)) {
        createDatatable(params, customSearchWidget);
    } else {
        layer.msg.error("Table params is error!");
    }
}

function InitTableModuleNew(params) {
    if (CheckAndInitStorage(params)) {
        createDatatable(params);
    } else {
        layer.msg.error("Table params is error!");
    }
}

function InitTableModuleWithId(tableId) {
    if (checkLocalStorage(tableId)) {
        var params = $("#" + tableId).data(KEY_TABLE_ITEMS);
        createDatatable(params);
    } else {
        // TODO 切换标签页，概要信息页会走到这里，不合规范
        //layer.msg.error("Table localStorage is empty!");
    }
}

function CheckAndInitStorage(params) {
    // 检查table参数是否完整有效
    var initParams = params && params.initParams ? params.initParams : {};
    var tableId = initParams.tableId,
        toolsId = initParams.toolsId,
        urlPrefix = initParams.urlPrefix,
        permissions = initParams.permissions;
    if (!params || !tableId || !toolsId || !urlPrefix || !permissions) {
        return false;
    }
    var newParams = formatTableParams(params),
        localStrg = newParams.localStrg,
        oldStorage = getLocalStorageModel(tableId, KEY_TABLE_LS),
        $table = $("#" + tableId);
    $table.data(KEY_TABLE_ITEMS, newParams);
    if (!(oldStorage && (!(oldStorage.version || localStrg.version)
        || (oldStorage.version && localStrg.version && oldStorage.version == localStrg.version)))) {
        initLocalStorage(tableId, localStrg);
    }
    return true;
}

function formatTableParams(tableItems) {

    var items = tableItems.trs,
        len = items.length,
        tableKey = tableItems.tableKey,
        i18nPrefix = tableItems.i18nPrefix,
        urlPrefix = window.PATH + tableItems.initParams.urlPrefix,
        customComps = tableItems.customComps,
        newItems = [],
        showCols = [],
        localStrg = {};

    for (var i = 0; i < len; i++) {
        var item = items[i],
            name = item.name,
            width = item.width,
            vali = item.vali;
        
        if (!(item.show === false)) {
            item.show = true;
        }
        if (item.sort || item.name === tableKey) {
            item.sort = true;
        }
        if (!width || isNaN(Number(width))) {
            item.width = 100;
        }
        // 新增编辑组件的初始化
        // comType & qryType的初始化，qryType取自前者；
        if (item.comType === "select" || item.comType === "radio") {
            // 兼容：将数组转换成object的格式
            if( item.comData && isArray(item.comData) ){
                item.comData = { data: item.comData };
            } else if( item.comData && typeof item.comData==="object"){
                item.comData.data || (item.comData.data = getJsonData(i18nPrefix + name + ".comData"));
            }else{
                item.comData = { data: getJsonData(i18nPrefix + name + ".comData") };
            }

            if (!item.comData || isArray(item.comData)) {
                var oldData = item.comData;
                item.comData = {};
                item.comData.data = oldData || getJsonData(i18nPrefix + name + ".comData");
            } else {
                if (!item.comData.data) {
                    item.comData.data = getJsonData(i18nPrefix + name + ".comData")
                }
            }
        }
        if (item.comType === "ajaxSelect") {
            //url不拼接    sam
            //item.comDataS2.url = urlPrefix + item.comDataS2.url;
            item.comDataS2.editInit = item.comDataS2.editInit !== false;
        }
        if (item.qryType === "select") {
            if (!item.qryData || isArray(item.qryData)) {
                var oldQryData = item.qryData;
                item.qryData = {};
                item.qryData.data = oldQryData || getJsonData(i18nPrefix + name + ".comData");
            } else {
                if (!item.qryData.data) {
                    item.qryData.data = getJsonData(i18nPrefix + name + ".comData")
                }
            }
        }
        if (item.qryType === "ajaxSelect") {
            item.qryDataS2.url = urlPrefix + item.qryDataS2.url;
            item.qryDataS2.editInit = item.qryDataS2.editInit !== false;
        }
        // 用comType相关值填充qryData
        if (!item.qryType && item.comType) {
            item.qryType = item.comType;
            if (item.qryType === "select") {
                item.qryData = Object.create(item.comData)
            }
            if (item.qryType === "ajaxSelect") {
                item.qryDataS2 = Object.create(item.comDataS2)
            }
        }
        if (!(vali && vali.required === false)) {
            if (!vali)
                item.vali = {};
            item.vali.required = true;
        }
        if (vali && vali.date) {
            // 日期同时设置搜索和新增编辑的comType
            item.qryType = item.qryType || item.comType || "date";
            item.comType = item.comType || item.qryType || "date";
            if (!vali.dateFormat) {
                item.vali.dateFormat = "yyyy-MM-dd HH:mm:ss";// "YYYY/DD/MM
                // hh:mm:ss";?8.16改动，不确定是否正确
            }
        }
        if (item.qryType === "date") {
            item.qryDateFormat = item.qryDateFormat || "yyyy-MM-dd HH:mm:ss";
        }
        // disabled="A",适用于表格主键自增长的情况
        if (item.name === tableKey && (!item.hideEdit) && (!item.disabled)) {
            item.disabled = "E";
        }
        // 设置显示列的本地存储
        if (item.detailShow !== false){
            showCols.push([item.name, item.show]);;
        }
        
        newItems.push(item);
    }
    tableItems.trs = newItems;
    // 组装localStrg
    localStrg.version = tableItems.version;
    localStrg.pageSize = tableItems.pageSize;
    localStrg.sorts = tableItems.sorts || [];
    localStrg.showCols = showCols;
    localStrg.resetCols = showCols;
    localStrg.customComps = customComps;
    localStrg.urlPrefix = urlPrefix;
    tableItems.localStrg = localStrg;

    return tableItems;
}



function setLocalStorageModel(tableId, keyWord, data) {
    if (!tableId || !keyWord || !data)
        return false;
    var storage = window.localStorage;
    var KEY_WORD = "config." + keyWord + "." + tableId;
    if (typeof data == "string") {
        storage.removeItem(KEY_WORD);
        storage.setItem(KEY_WORD, data);
    } else if (typeof data == "object") {
        storage.removeItem(KEY_WORD);
        storage.setItem(KEY_WORD, JSON.stringify(data));
    }
}
function getLocalStorageModel(tableId, keyWord) {
    var KEY_WORD = "config." + keyWord + "." + tableId;
    var storage = window.localStorage;
    var data = storage.getItem(KEY_WORD);
    if (data != null && data != "") {
        if (data.indexOf("{") != -1 || data.indexOf("[") != -1) {
            data = JSON.parse(data);
        }
        return data;
    }
    return "";
}

function getLSDataChild(tableId, keyWord) {
    var localStrg = getLocalStorageModel(tableId, KEY_TABLE_LS);
    if (!localStrg || typeof localStrg !== "object") {
        return false
    }
    return localStrg[keyWord];
}
function setLSDataChild(tableId, keyWord, data) {
    var key = "config." + KEY_TABLE_LS + "." + tableId,
        storage = window.localStorage,
        localStrg = getLocalStorageModel(tableId, KEY_TABLE_LS);
    if (!tableId || !keyWord || !data || !localStrg || typeof localStrg !== "object")
        return false;

    localStrg[keyWord] = data;
    storage.removeItem(key);
    storage.setItem(key, JSON.stringify(localStrg));
}

function initLocalStorage(tableId, lsData) {
    if (!lsData || typeof lsData !== "object") {
        return false
    }
    var localStrgKey = "config." + KEY_TABLE_LS + "." + tableId,
        storage = window.localStorage;
    storage.removeItem(localStrgKey);
    storage.setItem(localStrgKey, JSON.stringify(lsData));
}

function checkLocalStorage(tableId) {
    var params = $("#" + tableId).data(KEY_TABLE_ITEMS),
        initParams = (params && params.initParams) || {},
        //tableId = initParams.tableId,
        toolsId = initParams.toolsId,
        urlPrefix = initParams.urlPrefix,
        permissions = initParams.permissions;
    return ( tableId && toolsId && urlPrefix && permissions);
}

function switchTabAndTools(tableId, toolsId, tabBtnId) {
    var $table = $("#" + tableId);
    if ($table.length > 0) {
        if ($table.hasClass("flag-table-init")) {
            queryTableDataModel(tableId, '1');
        } else {
            InitTableModuleWithId(tableId);
        }
    }
    $(".flag-tools").hide();
    $(".flag-tabs").hide();
    if (tableId)
        $table.show();
    if (toolsId)
        $("#" + toolsId).show();
    if (tabBtnId) {// 适配“更多”按钮
        $(".flag-tabs-btn").removeClass("active");
        $("#" + tabBtnId).addClass("active");
    }
}

function createDatatable(params, customSearchWidget) {
    var tableId = params.initParams.tableId,
        toolsId = params.initParams.toolsId,
        //urlPrefix = params.initParams.urlPrefix,
        permissions = params.initParams.permissions,
        page = params.initParams.page,
        custom = params.customComps && params.customComps.custom;

    initTabContainerHtml(tableId, toolsId, custom, permissions, params.imports, params.exports);
    initTableTools(tableId, params, customSearchWidget);
    initTableBodyAndEvent(tableId, page);
    initTablePositionModel(tableId);
}

function initTabContainerHtml(contentId, toolsAreaId, custom, permissions, imports, exports) {
    var style = ' style="font-size: 14px;padding: 4px 12px;margin-left:3.56px;" ',
        curdTools = '', IExportTools = '', settingAndSearchTools = '',
        custom1 = '', custom2 = '', custom3 = '', toolsHtml = '', table = '';
    if (custom && isArray(custom)) {
        for (var i = 0; i < custom.length; i++) {
            var obj = custom[i], name = obj.name, location = obj.location, color = obj.color, icon = obj.icon,
                associated = obj.associated;
            var customHtml = '<div class=" btn f-p-tips f-p-tips-button ' + color + '" ' + style + ' id="' + contentId + '-tools-' + name + '" '
                + (associated !== false ? '' : 'disabled="disabled"')
                + '><i class="la ' + icon + '"></i>' + '<div class="f-t-tips">' + getJsonData(name) + '</div></div>';
            if (location == 1) {
                custom1 = customHtml;
            } else if (location == 2) {
                custom2 = customHtml;
            } else {
                custom3 = customHtml;
            }
        }
    }
    //2017.12.2  SAM隐藏详情按钮
    //la la-edit 旧版本
    //详情 <i class="la la-book"></i>旧版本
    if (permissions[0] == 0) {// onclick="viewDetail(\''+contentId+'\')"
        curdTools += '<div style="display:none;" class="btn f-p-tips f-p-tips-button gray_tableModal" disabled="disabled" ' + style + ' id="' + contentId + '-tools-detail">'
            + '<i class="la la-book"></i><div class="f-t-tips">' + getJsonData("details") + '</div></div>';
    }
    if (permissions[1] == 0) {
        curdTools += '<div class=" btn success f-p-tips f-p-tips-button " ' + style + ' id="' + contentId + '-tools-add" '
            + '><i class="la la-plus"></i>' + '<div class="f-t-tips">' + getJsonData("new") + '</div></div>';
    }
    if (permissions[2] == 0) {
        curdTools += '<div  class="btn f-p-tips f-p-tips-button gray_tableModal" disabled="disabled" ' + style + ' id="' + contentId + '-tools-edit"'
            + '><i class="la editIcon"></i>' + '<div class="f-t-tips">' + getJsonData("edit") + '</div></div>';
    }
    //<i class="la la-trash-o">旧版本
    //<i class="la deleteIcon">新版本
    if (permissions[3] == 0) {
        curdTools += '<div  class="btn f-p-tips f-p-tips-button gray_tableModal" disabled="disabled" ' + style + ' id="' + contentId + '-tools-delete" onclick="toolDelete(\'' + contentId + '\')" ' +
            '><i class="la deleteIcon"></i><div class="f-t-tips">' + getJsonData("delete") + '</div></div>';
        ;
    }
    if (imports) {
        IExportTools += '<input type="file" id="' + contentId + '_importCsv" class="hidden" accept="text/csv" onchange="importCsvModel(\'' + contentId + '\')">' +
            '<div  class="btn darkorange f-p-tips f-p-tips-button " ' + style + ' onclick="$(\'#' + contentId + '_importCsv\').click()"><i class="la la-upload"></i>' +
            '<div class="f-t-tips">' + getJsonData("import") + '</div></div>';
    }
    if (exports) {
        IExportTools += '<div class="btn darkorange f-p-tips f-p-tips-button " ' + style + ' onclick="exportCsvModel(\'' + contentId + '\')"><i class="la la-download"></i>' +
            '<div class="f-t-tips">' + getJsonData("export") + '</div></div>';
        // '<div class="btn darkorange f-p-tips" '+style+' onclick="exportTempCsvModel(\''+ contentId +'\')"><i class="la la-download"></i>'+
        // '<div class="f-t-tips">'+getJsonData("exportTemplate")+'</div></div>'; 导出模板
    }
    //<i class="la la-gear">旧版本
    //<i class="la settingIcon">新版本\
    //la la-search-plus旧版本
    //la la-search-minus旧版本
    settingAndSearchTools += '<div class="viewcfg-dropdown" id="' + contentId + '-tools-setting">'
        + '<a class="btn purple f-p-tips f-p-tips-button dropdown-toggle" ' + style + ' data-toggle="dropdown" href="javascript:" aria-expanded="false">'
        + '<i class="la settingIcon"></i><div class="f-t-tips">' + getJsonData("setting") + '</div></a>'
        + '<ul class="dropdown-menu dropdown-blue rowPopContainer" style="color:#666f80;border: 1px solid #e6e9f0;right:20px;padding:10px 5px;" onclick="event.stopPropagation()"><li style="border-bottom: 1px solid #e6e9f0;height:35px;">'
        + '<div class="pull-left"><label style="margin: 0 0 0 10px;">'
        + '<input type="checkbox" id="' + contentId + '-checkAllBtn"><span class="text"></span></label>' + getJsonData("check_all") + '</div>'
        + '<button id="' + contentId + '-resetColsBtn" class="btn btn-blue-new pull-right" style="padding:0 3px;margin: 5px 10px 0px 0px;">'
        + getJsonData("restore") + '</button></li>'
        + '<div id="' + contentId + '-RowPopId"></div></ul></div>';
    settingAndSearchTools += '<div id="' + contentId + '-searchBtnId" class="btn f-p-tips f-p-tips-button warning" ' + style + ' aria-expanded="false">'
        + '<i class="la searchIcon" id="' + contentId + '-searchPlusId"></i>'
        + '<i class="la searchIcon" style="display:none" id="' + contentId + '-searchMinusId"></i><div class="f-t-tips">' + getJsonData("search") + '</div></div>';
    toolsHtml += custom1 + curdTools + IExportTools + custom2 /*+ '&nbsp;&nbsp;'*/ + settingAndSearchTools + custom3;
    $("#" + toolsAreaId).append(toolsHtml);
    table += '<form class="collapse" id="' + contentId + '-searchArea" style=""></form>';
    table += '<div class="data-thead ' + contentId + '-theadDivClass" style=";overflow: hidden;"' +
        'onmousemove="thOnMouseMoveModel(\'' + contentId + '\')"' + 'onmouseup="thOnMouseUpModel(\'' + contentId + '\')"' +
        '><table class="table  table-striped dataTable" style="width:100%;">' +// table-bordered
        '<thead class="flip-content"><tr style="" role="row" id="' + contentId + '-thead"></tr></thead></table></div>';
    table += '<div class="data-tbody slimScrollDiv1 ' + contentId + '-bodyDivClass" style=""' +
        'onmousemove="thOnMouseMoveModel(\'' + contentId + '\')"' + 'onmouseup="thOnMouseUpModel(\'' + contentId + '\')"' + '>'
        + '<div><table class="table eTable-border table-hover table-striped" style="width:100%;">'
        + '<tbody class="page-data-tbody" id="' + contentId + '-body"></tbody></table></div>'
        + '<div id="' + contentId + '-body-noData" style="width:100%;padding:10px;text-align:center;display:none;">'
        + '<span style="font-size:14px;">' + '<i class="la la-frown-o" style="font-size:20px;padding-top:5px"></i>' + getJsonData("label.table.noDataRecord") + '</span></div>'
        + '</div>';
    table += '<div class="row foot-tools" id="' + contentId + '-foot" style="">' +
        /*'<div class="pull-left padding-top-10" >' +//<a onclick="queryTableDataModel(\''+contentId+'\')" class="btn btn-white btn-xs icon-only primary"></a>
        '<i class="la la-refresh primary" style="cursor:pointer;font-size: 14px;" onclick="queryTableDataModel(\''+contentId+'\')"></i>' +// f-p-tips
        // '<div class="f-t-tips">'+getJsonData("refresh")+'</div>'+
        '<span class="refreshTime" style="font-size: 12px;padding: 0 5px;color:#777;">'+ (new Date()).format("hh:mm:ss") +'</span></div>' +*/
        '<div id="' + contentId + '-footContent" class="pull-right table-page-tools position-relative">'
        + '<div class="pagetools" id="' + contentId + '-footBody"></div><select id="' + contentId + '-footPop" onchange="changePagesizeModal(\'' + contentId + '\')" class="form-control">'
        + '<option label="25" value="25">25</option><option label="60" value="60">60</option><option label="100" value="100">100</option><option label="200" value="200">200</option>'
        + '</select></div></div>';
    $("#" + contentId).append(table).addClass("flag-table-init");

    //解绑所有事件（重复绑定导致按钮失效）
    /*$(".viewcfg-dropdown").unbind();
    $(".viewcfg-dropdown").on('click',function(){
        $(this).toggleClass("open");
    })*/
}

function initTableTools(tableId, params, customSearchWidget) {
    var localStrg = getLocalStorageModel(tableId, "localStrg"),
        showCols = localStrg.showCols,
        trs = params.trs,
        i18nPrefix = params.i18nPrefix,
        customComps = params.customComps || {},
        custom = customComps.custom,
        $addBtn = $("#" + tableId + "-tools-add"),
        $editBtn = $("#" + tableId + "-tools-edit"),
        $detailBtn = $("#" + tableId + "-tools-detail"),
        addObj = customComps.add,
        editObj = customComps.edit,
        detailObj = customComps.detail,
        addClickE = addObj && addObj.click && typeof addObj.click === "function" ? addObj.click : undefined,
        editClickE = editObj && editObj.click && typeof editObj.click === "function" ? editObj.click : undefined,
        detailClickE = detailObj && detailObj.click && typeof detailObj.click === "function" ? detailObj.click : undefined;
    if (!customSearchWidget) {
        initSearchWidgetModel(tableId);
    }
    initSettingBodyAndEvent(tableId, trs, showCols, i18nPrefix);
    if (addClickE) {
        $addBtn.on("click", {tabId: tableId, type: "new"}, addClickE);
    } else {
        $addBtn.on("click", {tabId: tableId, type: "new"}, viewEditOrAdd);
    }
    if (editClickE) {
        $editBtn.on("click", {tabId: tableId, type: "edit"}, editClickE);
    } else {
        $editBtn.on("click", {tabId: tableId, type: "edit"}, viewEditOrAdd);
    }

    if (detailClickE) {
        $detailBtn.on("click", {tabId: tableId, type: "edit"}, detailClickE);
    } else {
        $detailBtn.on("click", function () {
            viewDetail(tableId);
        });
    }
    if (custom && isArray(custom)) {
        for (var i = 0; i < custom.length; i++) {
            var obj = custom[i];
            var name = obj.name, click = obj.click, $customBtn = $("#" + tableId + "-tools-" + name);
            $customBtn.on("click", {tabId: tableId}, click);
        }
    }
}

function initSettingBodyAndEvent(tableId, trs, showCols, i18nPrefix) {
    // 填充HTML
    var $setting = $("#" + tableId + "-tools-setting"),
        selectRowsPopId = tableId + "-RowPopId",
        allCheckBtnId = tableId + "-checkAllBtn",
        $rowsPop = $setting.find("#" + selectRowsPopId),
        html = "",
        len = trs.length,
        $dataTHead = $("." + tableId + "-theadDivClass");

    for (var i = 0; i < len; i++) {
        var detailShowFlag = (trs[i].detailShow != undefined) ? trs[i].detailShow : true;
        if (detailShowFlag){
            var name = trs[i].name,
                title = getJsonData(i18nPrefix + name) || getJsonData("db.common." + name);
            html += "<li><label style='margin: 0 0 0 10px;'><input type='checkbox' class='inverted EUBtn-blue'";
            html += getShowFlagByName(name, showCols) ? " checked " : "";
            html += "name='" + selectRowsPopId + "' value='" + name + "' >";// onchange='changeShowItems(\""+tableId+"\")'
            html += "<span class='text'></span></label>" + title + "</li>";
        }
    }
    $rowsPop.html(html);
    var chsub = $rowsPop.find("input[name='" + selectRowsPopId + "']").length;
    var checkedsub = $rowsPop.find("input[name='" + selectRowsPopId + "']:checked").length;
    $("#" + allCheckBtnId).attr("checked", checkedsub == chsub ? true : false);
    $setting.find(".rowPopContainer").on("change", {tabId: tableId}, function (e) {
        var tableId = e.data.tabId,
            target = e.target || e.srcElement,
            $target = $(target),
            showCols = getLSDataChild(tableId, "showCols"),
            newShowCols = showCols,
            rowPopIdOrName = tableId + "-RowPopId";
        if (target.id == (tableId + "-checkAllBtn")) {
            var checked = $target.prop("checked");
            newShowCols = refreshShowColsData(tableId, showCols, checked ? 1 : -1);
        } else if (target.nodeName.toLowerCase() == "input" && $target.attr("name") == selectRowsPopId) {
            var checked = $target.prop("checked"),
                value = $target.val();
            newShowCols = refreshShowColsData(tableId, showCols, value, checked)
        }
        refreshSettingPopBody(tableId, newShowCols);
        queryTableDataModel(tableId);
    });
    
    $("#" + tableId + "-resetColsBtn").on("click", {tabId: tableId}, function (e) {
        var tableId = e.data.tabId,
            resetCols = getLSDataChild(tableId, KEY_LS_RESETCOLS);
        setLSDataChild(tableId, KEY_LS_SHOWCOLS, resetCols);
        refreshSettingPopBody(tableId, resetCols);
        queryTableDataModel(tableId);
    });
}

function refreshSettingPopBody(tableId, showCols) {
    var rowPopIdOrName = tableId + "-RowPopId",
        $setting = $("#" + tableId + "-tools-setting");
    $("#" + rowPopIdOrName).find("input[name=" + rowPopIdOrName + "]").each(function (index, item) {
        var name = $(this).val();
        for (var i = 0, len = showCols.length; i < len; i++) {
            if (name == showCols[i][0]) {
                $(this).prop("checked", showCols[i][1]);
                break;
            }
        }
    });
    var chsub = $setting.find("#" + rowPopIdOrName).find("input[name='" + rowPopIdOrName + "']").length;
    var checkedsub = $setting.find("#" + rowPopIdOrName).find("input[name='" + rowPopIdOrName + "']:checked").length;
    $setting.find("#" + tableId + "-checkAllBtn").prop("checked", checkedsub == chsub ? true : false);
}

function getShowFlagByName(name, showCols) {
    for (var i = 0, len = showCols.length; i < len; i++) {
        if (name == showCols[i][0]) {
            return showCols[i][1];
        }
    }
}

function refreshShowColsData(tableId, showCols, cols, flag) {
    if (cols && (cols == 1 || cols == -1)) {
        var value = cols == 1 ? true : false;
        for (var i = 0, len = showCols.length; i < len; i++) {
            showCols[i][1] = value;
        }
    } else if (cols) {
        for (var i = 0, len = showCols.length; i < len; i++) {
            if (cols == showCols[i][0]) {
                var value = flag ? true : false;
                showCols[i][1] = value;
                break;
            }
        }
    }
    setLSDataChild(tableId, "showCols", showCols);
    return showCols;
}

function initSearchWidgetModel(tableId) {
    var $searchForm = $("#" + tableId + "-searchArea"),
        tableParams = $("#" + tableId).data(KEY_TABLE_ITEMS),
        items = tableParams.trs, //取不到值
        group = tableParams.group && isArray(tableParams.group) && tableParams.group.length > 0,
        i18nPrefix = tableParams.i18nPrefix,
        queryList = [],
        btnPosFlag = 0,
        html = '<div class="panel-body"><div class="row">';
    for (var i = 0, len = items.length; i < len; i++) {
        if (items[i].advQry) {
            queryList.push(items[i]);
        }
    }
    for (var i = 0, queryLen = queryList.length; i < queryLen; i++) {
        var queryItem = queryList[i],
            name = queryItem.name,
            advQry = queryItem.advQry,
            qryType = queryItem.qryType,
            multiple = advQry.indexOf("IN") >= 0,
            duringFlag = (advQry.indexOf("DURING") >= 0),
            nameType = "cx_" + advQry + "-|-" + name,
            //nameType = name,
            placeholder = getJsonData(i18nPrefix + name + ".help") || getJsonData("db.common." + name + ".help") || "i18n is null : " + name;
        btnPosFlag += 1;
        // html += '<div class="col-md-4 margin-bottom-5"><div class="input-group"><span class="input-group-btn">' +
        //     '<button class="btn btn-default" type="button">'+getJsonData(i18nPrefix + name)+'</button></span><div class="adv-value">';
        html += '<div class="col-md-4 margin-bottom-5"><span class="adv-name">' + getJsonData(i18nPrefix + name) + ':</span><div class="adv-value">';
        if (qryType === "select" || qryType === "ajaxSelect") {

            html += '<div class="input-sm no-border no-padding" style="min-width:154px;' + '">'// + (multiple ? "height:40px !important;" : "")
                + '<select name="' + nameType + '" style="width: 100%;" ' + (multiple ? ' multiple="multiple"' : "") + '></select></div>';
        } else {
            var laydateHtml = "", laydateHtmlEnd = "", dateFormat = "";
            if (qryType === "date") {
                dateFormat = queryItem.qryDateFormat ? ',format:"' + queryItem.qryDateFormat + '"' : "";
                laydateHtml = "onclick='laydate.render({type:\"datetime\",elem:this,istime: true" + dateFormat + "})'";
                laydateHtmlEnd = "onclick='laydate.render({type:\"datetime\",elem:this,istime: true" + dateFormat + ",defaultHms:\"23:59:59\"})'";
            }else if(qryType === "month"){
                dateFormat = queryItem.qryDateFormat ? ',format:"' + 'yyyy-MM' + '"' : "";
                laydateHtml = "onclick='laydate.render({type:\"month\",elem:this,istime: true" + dateFormat + "})'";
                laydateHtmlEnd = "onclick='laydate.render({type:\"month\",elem:this,istime: true" + dateFormat + ",defaultHms:\"23:59:59\"})'";
            }
            if (duringFlag) {
                var phGte = getJsonData(i18nPrefix + name + ".gte") || getJsonData("db.common." + name + ".gte") || "i18n.gte is null : " + name,
                    phlte = getJsonData(i18nPrefix + name + ".lte") || getJsonData("db.common." + name + ".lte") || "i18n.lte is null : " + name;

                html += '<div><input type="text" style="width:48%;" name="cx_GTE-|-' + name + '" class="input-sm laydate-input"' + 'placeholder="' + phGte + '" ' + laydateHtml +
                    '><span style="display:inline-block;width: 4%;text-align: center;">-</span>' +
                    '<input type="text" style="width:48%;" name="cx_LTE-|-' + name + '" class="input-sm laydate-input"' + 'placeholder="' + phlte + '" ' + laydateHtmlEnd + '></div>';
            
                //sam 修改区间参数为start和end 2017/12/08
                /*name = titleCase(name);
                html += '<div><input type="text" style="width:48%;" name="start' + name + '" class="input-sm laydate-input"' + 'placeholder="' + phGte + '" ' + laydateHtml +
                    '><span style="display:inline-block;width: 4%;text-align: center;">-</span>' +
                    '<input type="text" style="width:48%;" name="end' + name + '" class="input-sm laydate-input"' + 'placeholder="' + phlte + '" ' + laydateHtmlEnd + '></div>';*/
            } else {
                html += '<div><input type="text" name="' + nameType + '" class="input-sm laydate-input"' + 'placeholder="' + placeholder + '" ' + laydateHtml + '></div>';
            }
        }
        html += '</div></div>';
        // html += '</div></div></div>';
    }

    html += '<div class="col-md-4 col-md-offset-' + (2 - ( btnPosFlag % 3 )) * 4 + ' ">'
        + '<div class="text-right" style="display:inline-block;width:90%;margin-left:5px;">'// perfect!
        + (group ? '<select name="groupBy" style="float:left;"></select>' : '')//三目运算符优先级最低//width:100%;
        + '<button type="button" class="btn btn-searchBox" style="height:30px;margin:0 5px;" onClick="queryTableDataModel(\'' + tableId + '\',1)"><i style="" class="la la-search"></i>' + getJsonData("search") + '</button>'
        + '<button type="button" class="btn btn-searchBox-reset" style="height:30px;" onClick="resetSearchCondition(\'' + tableId + '\')"><i style="" class="la la-undo"></i>' + getJsonData("restore") + '</button>'
        + '</div></div></div></div>';
    $searchForm.append(html);

    for (var i = 0, listLen = queryList.length; i < listLen; i++) {
        var queryItem = queryList[i],
            name = queryItem.name,
            advQry = queryItem.advQry,
            qryType = queryItem.qryType,
            multiple = advQry.indexOf("IN") >= 0,
            qryData = queryItem.qryData,
            placeholder = getJsonData(i18nPrefix + name + ".help");
        var nameType = advQry === "[LIKE]" ? "cx_LIKE-|-" + name : "cx_" + advQry + "-|-" + name;
        //var nameType = advQry === "[LIKE]" ? name : "cx_" + advQry + "-|-" + name;

        var selector = '#' + tableId + '-searchArea [name="' + nameType + '"]';
        if (advQry && qryType === "select") {
            console.log()
            if (qryData && qryData.data) {
                select2BaseImpl({
                    params: qryData,
                    selector: selector,
                    placeholder: placeholder,
                    multiple: multiple
                });
                // select2BaseImpl(qryData, selector, placeholder, multiple);
                $(selector).val(queryItem.defQry || "").trigger("change");
            }
        } else if (advQry && qryType === "ajaxSelect") {
            select2DataImpl({
                params: queryItem.comDataS2,
                selector: selector,
                placeholder: placeholder,
                multiple: multiple
            });
        }
    }
    // group下拉框
    if (group) {
        var groupData = [], originalData = tableParams.group;//groupData = [{id:"", text:getJsonData("groupBy")}],
        for (var i = 0, len = originalData.length; i < len; i++) {
            groupData.push({id: originalData[i], text: getJsonData(i18nPrefix + originalData[i])});
        }
        var groupParams = {
            data: groupData,
            // formatter: function(data){
            //     var groupName = data && data.id;
            //     if( groupName===""||groupName===undefined){
            //         return $('<div class="success" style="display:inline-block;"><i class="la la-search"></i>'+data.text+'</div>');
            //     }else{
            //         return $('<div class="success" style="display:inline-block;">'+data.text+'</div>');
            //     }
            // },
            selectE: function () {
                queryTableDataModel(tableId, 1);
            }
        };
        select2BaseImplByArray(groupParams, '#' + tableId + '-searchArea [name="groupBy"]', getJsonData("groupBy"));
    }
    $(".laydate-input").click();
}

function resetSearchCondition(tableId) {
    var columns = $("#" + tableId).data(KEY_TABLE_ITEMS).trs,
        $form = $("#" + tableId + "-searchArea");
    for (var i = 0, len = columns.length; i < len; i++) {
        var defQry = columns[i].defQry ? columns[i].defQry : "";
        $form.find("[name$=" + columns[i].name + "]").val(defQry).trigger("change");
        $("#search-" + tableId + "-" + columns[i].name).val(defQry).trigger("change"); // ?兼容
    }
    $form.find("[name$=groupBy]").val("").trigger("change");
    queryTableDataModel(tableId, 1);
}

function initTableBodyAndEvent(tableId, page) {
    queryTableDataModel(tableId, page);
}

function initTablePositionModel(tableId) {
    var winHeight = document.documentElement.clientHeight;
    var dataTableDivHeight = winHeight - 186 - $(".stati-info").height() - $(".page-breadcrumbs").height();// 窗体高度-198-？的高度-栏目条高度
    var $dataTBody = $("." + tableId + "-bodyDivClass"),
        $dataTHead = $("." + tableId + "-theadDivClass");
    $dataTBody.css("height", dataTableDivHeight);
    $(".summary-tab").css("height", dataTableDivHeight + 81);
    $dataTBody.scroll(function (e) {
        return $dataTHead.prop("scrollLeft", e.target.scrollLeft);
    });

    var $searchBtn = $("#" + tableId + "-searchBtnId"),
        $searchArea = $("#" + tableId + "-searchArea");
    $searchBtn.click(function () {
        var isExpanded8 = !JSON.parse($searchBtn.attr("aria-expanded"));
        var height8 = dataTableDivHeight;
        if (isExpanded8) {
            $searchArea.show();
            $("#" + tableId + "-searchPlusId").hide();
            $("#" + tableId + "-searchMinusId").show();
            height8 = (dataTableDivHeight - $searchArea.height());
        } else {
            $searchArea.hide();
            $("#" + tableId + "-searchMinusId").hide();
            $("#" + tableId + "-searchPlusId").show();
        }
        $dataTBody.css({"height": height8 + "px"});
        $searchBtn.attr("aria-expanded", isExpanded8 + "");
    });

    /*$('.slimScrollDiv1').slimScroll({
        height: 'auto',
        width:"auto"
    })*/

    $(".slimScrollDiv1").mCustomScrollbar({
        axis:"yx",
        theme:"minimal-dark",
        callbacks:{
            //表头移动
            whileScrolling:function(e){
              return $dataTHead.prop("scrollLeft", -(this.mcs.left));
            }
        }
    });
}

function selectThisRow(tableId, number) {
    $("input[name*='" + tableId + "-rowItems']").prop("checked", false);
    $("input[name='" + tableId + "-rowItems" + number + "']").prop("checked", true);
    changeSelectRows(tableId);
    changeTrBackground(tableId);
}

function changeTrBackground(tableId) {
    var checkedsubList = $("input[name*='" + tableId + "-rowItems']:checked");
    var unCheckedsubList = $("input[name*='" + tableId + "-rowItems']").not("input:checked");
    unCheckedsubList.each(function () {
        $(this).parents("tr").removeClass("active_tr");
    });
    checkedsubList.each(function () {
        $(this).parents("tr").addClass("active_tr");
    });
}

function changeSelectRows(tableId) {
    var chsubList = $("input[name*='" + tableId + "-rowItems']").length,
        checkedsubList = $("input[name*='" + tableId + "-rowItems']:checked").length,
        tableItems = $("#" + tableId).data(KEY_TABLE_ITEMS),
        permission = tableItems.initParams.permissions,
        batchEdit = tableItems.batchEdit,
        custom = tableItems.customComps && tableItems.customComps.custom;
    if (checkedsubList == chsubList) {
        $("#" + tableId + "-tableCheckAllBtn").prop("checked", true);
    } else {
        $("#" + tableId + "-tableCheckAllBtn").prop("checked", false);
    }
    var $details = $('#' + tableId + "-tools-detail"),
        $edit = $('#' + tableId + "-tools-edit"),
        $delete = $('#' + tableId + "-tools-delete"),
        $add = $('#' + tableId + "-tools-add");
    if (checkedsubList == 1 && permission[0] == 0) {
        $details.removeAttr("disabled");
        $details.removeClass("gray_tableModal").addClass("blue");
    } else {
        $details.attr("disabled", "disabled");
        $details.removeClass("blue").addClass("gray_tableModal");
    }

    if ((checkedsubList == 1 && permission[2] == 0) || (checkedsubList > 1 && permission[2] == 0 && batchEdit)) {
        $edit.removeAttr("disabled");
        $edit.removeClass("gray_tableModal").addClass("primary");
    } else {
        $edit.attr("disabled", "disabled");
        $edit.removeClass("primary").addClass("gray_tableModal");
    }
    if (checkedsubList > 0 && permission[3] == 0) {
        $delete.removeAttr("disabled");
        $delete.removeClass("gray_tableModal").addClass("danger");
    } else {
        $delete.attr("disabled", "disabled");
        $delete.removeClass("danger").addClass("gray_tableModal");
    }
    if (permission[1] == 0) {
        $add.removeAttr("disabled");
        $add.removeClass("gray_tableModal").addClass("success");
    } else {
        $add.attr("disabled", "disabled");
        $add.removeClass("success").addClass("gray_tableModal");
    }
    //关于多行编辑
    if (custom && isArray(custom)) {
        for (var i = 0; i < custom.length; i++) {
            var obj = custom[i], name = obj.name, color = obj.color, associated = obj.associated,
                $custom = $('#' + tableId + "-tools-" + name);
            if (associated !== false && $custom != $("#viFiDeviceNewTab3-tools-batchImport")) {
                if (checkedsubList == 1) {
                    $custom.removeAttr("disabled");
                    $custom.removeClass("gray_tableModal").addClass(color);
                } else {
                    $custom.attr("disabled", "disabled");
                    $custom.removeClass(color).addClass("gray_tableModal");
                }
            }
        }
    }
    if (checkedsubList > 0) {
        $("#simCardNew-tools-cardDistribution").removeAttr("disabled");
        $("#simCardNew-tools-cardDistribution").removeClass("gray_tableModal").addClass("primary");
        $("#viFiDeviceNewTab3-tools-deviceDistribution").removeAttr("disabled");
        $("#viFiDeviceNewTab3-tools-deviceDistribution").removeClass("gray_tableModal").addClass("primary");
        $("#viFiDeviceNewTab3-tools-deviceCheckOut").removeAttr("disabled");
        $("#viFiDeviceNewTab3-tools-deviceCheckOut").removeClass("gray_tableModal").addClass("primary");
    }
    $("#viFiDeviceNewTab3-tools-batchImport").removeAttr("disabled");
    $("#viFiDeviceNewTab3-tools-batchImport").removeClass("gray_tableModal").addClass("primary");
    changeTrBackground(tableId);
}

function checkAllRows(tableId) {
    var isChecked = $("#" + tableId + "-tableCheckAllBtn").prop('checked');
    $("input[name*='" + tableId + "-rowItems']").prop("checked", isChecked);
    changeSelectRows(tableId);
    changeTrBackground(tableId);
}


//单个排序 只对点击的列排序 by sam
function rowsSort(tableId, columnName) {
    var tableParams = $("#" + tableId).data(KEY_TABLE_ITEMS),
        params = tableParams.trs,
        paramsLen = params.length;
    for (var i = 0; i < paramsLen; i++) {
        var item = params[i],
            name = item.name,
            sort = item.sort;
        if (name == columnName) {
            if (sort === false) {
                return;
            } else {
                break;
            }
        }
    }

    var rowsSortList = [];
    var theadId = "th-" + tableId + "-" + columnName;
    var th = $("#" + theadId);
    var c = th.attr("class");
    var sortArr = [];
    if (c && c.indexOf('sorting_asc') > -1) {
        th.removeClass('sorting_asc').addClass('sorting_desc');
        sortArr.push(columnName);
        sortArr.push(2);
    } else if (c && c.indexOf('sorting_desc') > -1) {
        th.removeClass('sorting_desc').removeClass('sorting_asc').addClass('sorting');
    } else if (c && c.indexOf('sorting') > -1) {
        th.removeClass('sorting').addClass('sorting_asc');
        sortArr.push(columnName);
        sortArr.push(1);
    }
    if (sortArr.length){
        rowsSortList.push(sortArr);
    }
    /*var html_sort = "";
    $("#" + tableId + "-thead>th").each(function (index, item) {
        console.log(item);
        var sortArr = [],
            sortClass = $(this).attr("class") || "sorting",
            colName = $(this).attr("name") || "";
        if (sortClass.indexOf("sorting_asc") != -1) {
            sortArr.push(colName);
            sortArr.push(1);
        } else if (sortClass.indexOf("sorting_desc") != -1) {
            sortArr.push(colName);
            sortArr.push(2);
        }
        sortArr.length > 0 && rowsSortList.push(sortArr);
    });*/
    setLSDataChild(tableId, "sorts", rowsSortList);
    queryTableDataModel(tableId);
}


//多个排序
/*function rowsSort(tableId, columnName) {
    var tableParams = $("#" + tableId).data(KEY_TABLE_ITEMS),
        params = tableParams.trs,
        paramsLen = params.length;
    for (var i = 0; i < paramsLen; i++) {
        var item = params[i],
            name = item.name,
            sort = item.sort;
        if (name == columnName) {
            if (sort === false) {
                return;
            } else {
                break;
            }
        }
    }

    var rowsSortList = [];
    var theadId = "th-" + tableId + "-" + columnName;
    var th = $("#" + theadId);
    var c = th.attr("class");
    if (c && c.indexOf('sorting_asc') > -1) {
        th.removeClass('sorting_asc').addClass('sorting_desc');
    } else if (c && c.indexOf('sorting_desc') > -1) {
        th.removeClass('sorting_desc').removeClass('sorting_asc').addClass('sorting');
    } else if (c && c.indexOf('sorting') > -1) {
        th.removeClass('sorting').addClass('sorting_asc');
    }
    var html_sort = "";
    $("#" + tableId + "-thead>th").each(function (index, item) {
        var sortArr = [],
            sortClass = $(this).attr("class") || "sorting",
            colName = $(this).attr("name") || "";
        if (sortClass.indexOf("sorting_asc") != -1) {
            sortArr.push(colName);
            sortArr.push(1);
        } else if (sortClass.indexOf("sorting_desc") != -1) {
            sortArr.push(colName);
            sortArr.push(2);
        }
        sortArr.length > 0 && rowsSortList.push(sortArr);
    });
    setLSDataChild(tableId, "sorts", rowsSortList);
    queryTableDataModel(tableId);
}*/

function paginationWidget(pageResult, tableId) {
    var page = pageResult || {},
        len = pageResult.contentList.length,
        sb = "",
        paginationSize = 5,
        current = (page.number + 1) || "-",
        begin = Math.max(1, current - parseInt(paginationSize / 2)),
        end = Math.min(begin + (paginationSize - 1), page.totalPages),
        size = page.size || "-",
        pageSize = page.size || 25,
        totalEle = page.totalElements || "-",
        totalPages = page.totalPages || "-";
    sb += "<div><ul class=\"pagination\">";

    if (page.hasPreviousPage) {
        sb += "<li><a class=\"pagination-btn\" page=\"1\" href=\"" + getJavascriptStrModal(tableId, 1, size) + "\"><i class=\"la la-angle-double-left\"></i></a></li>";
        sb += "<li><a class=\"pagination-btn\" href=\"" + getJavascriptStrModal(tableId, current - 1, size) + "\"><i class=\"la la-angle-left\"></i></a></li>";
    } else {
        sb += "<li class=\"disabled\"><a class=\"pagination-btn\" href=\"javascript:\"><i class=\"la la-angle-double-left\"></i></a></li>";
        sb += "<li class=\"disabled\"><a class=\"pagination-btn\" href=\"javascript:\"><i class=\"la la-angle-left\"></i></a></li>";
    }
    for (var i = begin; i < (end + 1); i++) {
        if (i == current) {
            sb += "<li class=\"active\"><a page=\"" + i + "\" href=\"javascript:\">" + i + "</a></li>";
        } else {
            sb += "<li><a class=\"pagination-btn-number\" href=\"" + getJavascriptStrModal(tableId, i, size) + "\">" + i + "</a></li>";
        }
    }
    if (page.hasNextPage) {
        sb += "<li><a class=\"pagination-btn\" href=\"" + getJavascriptStrModal(tableId, current + 1, size) + "\"><i class=\"la la-angle-right\"></i></a></li>";
        sb += "<li><a class=\"pagination-btn\" href=\"" + getJavascriptStrModal(tableId, page.totalPages, size) + "\"><i class=\"la la-angle-double-right\"></i></a></li>";
    } else {
        sb += "<li class=\"disabled\"><a class=\"pagination-btn\" href=\"javascript:\"><i class=\"la la-angle-right\"></i></a></li>";
        sb += "<li class=\"disabled\"><a class=\"pagination-btn\" href=\"javascript:\"><i class=\"la la-angle-double-right\"></i></a></li>";
    }

    var pageNum = "<input style='width:30px;margin:1px 5px;' value='" + current +
        "' onkeydown='event.keyCode===13&&queryTableDataModel(\"" + tableId + "\",  this.value)'>";
    sb += "<li class=\"disabled\"><a href=\"javascript:\">共" + totalPages + "页/" + totalEle + "条</a></li>";
    sb += "<li style=\"display:none;\"><span style='padding:3px 12px;'>" + getJsonData("page_tools.goto_page", pageNum) + "</span></li>";
    sb += "<ul></div>";
    $("#" + tableId + "-footBody").html(sb);
    $("#" + tableId + "-footPop").val(pageSize);
    if (len == 0) {
        $("#" + tableId + "-footContent").hide();
    } else {
        $("#" + tableId + "-footContent").show();
    }
}

function getJavascriptStrModal(tableId, page, pageSize) {
    return "javascript:queryTableDataModel(\'" + tableId + "\', " + page + ")";
}

function changePagesizeModal(tableId) {
    var pageSize = $("#" + tableId + "-footPop").val() || 25;
    setLSDataChild(tableId, "pageSize", pageSize);
    // setLocalStorageModel(tableId, "pageSize", pageSize);
    queryTableDataModel(tableId, 1);
}

function queryTableDataModel(tableId, page) {
    var tableParams = $("#" + tableId).data(KEY_TABLE_ITEMS);
    var localStrg = getLocalStorageModel(tableId, "localStrg"),
        currentPage = $("#" + tableId + "-footBody").find("li.active>a").html(),
        pageSize = localStrg.pageSize || "25",
        page = page || currentPage || localStrg.page || "1",
        sorts = localStrg.sorts || [],
        //url = window.PATH + tableParams.initParams.urlPrefix + "list.ajax?pageSize=" + pageSize + "&pageNo=" + page;
        url = window.PATH + tableParams.initParams.urlPrefix + "list?pageSize=" + pageSize + "&pageNo=" + page,
        $dataTHead = $("." + tableId + "-theadDivClass");

    //结算账单自定义
    if (tableParams.initParams.customParams){
        url = window.PATH + tableParams.initParams.urlPrefix + "list?pageSize=" + pageSize + "&pageNo=" + page + "&queryType=" + tableParams.initParams.customType;
    }
    
    var searchParams = getSearchParamsAndSorts(tableId, tableParams.trs, sorts);
    var params = {
        url: url,
        data: searchParams, 
        success: function (req) {
            var newResult = req.data,
                data = newResult.contentList,
                attach = newResult.attachList;
            $("#" + tableId).data("queryData", data).data("attachList", attach);
            //$("#" + tableId).data("queryData", data);
            createTabEntityById(tableId);
            paginationWidget(newResult, tableId);
            resetToolsBtnStatus(tableId);

            //删除滚动条 by sam
            $("." + tableId + "-bodyDivClass").mCustomScrollbar("destroy");

            //重置横向滚动条到最左侧
            $dataTHead.prop("scrollLeft", 0);

            //重置滚动条
            $("." + tableId + "-bodyDivClass").mCustomScrollbar({
                axis:"yx",
                theme:"minimal-dark",
                callbacks:{
                    //表头移动
                    whileScrolling:function(e){
                      return $dataTHead.prop("scrollLeft", -(this.mcs.left));
                    }
                }
            })
            //刷新时间
            //$("#"+tableId+"-foot").find("span.refreshTime").html((new Date()).format("hh:mm:ss"));
        }
    };
    doTableAjax(params);
}

function getSearchParamsAndSorts(tableId, columns, sorts) {
    /*var orderLen = sorts.length,
        params = getSearchParams(tableId, columns);
    if (sorts && orderLen > 0) {
        var html = '[';
        for (var i = 0; i < orderLen; i++) {
            var html_str = '[';
            html_str += '"' + sorts[i][0] + '",' + sorts[i][1] + ']';
            if (i != orderLen - 1) {
                html += html_str + ',';
            } else {
                html += html_str + ']';
            }
        }
        //params.cx_ORDER_LIST = html;
        console.log(html);
        params.orderList = html;
    }
    return params;*/

    //单个排序
    var orderLen = sorts.length;
    var params = getSearchParams(tableId, columns);
    /*
    if (sorts && orderLen > 0) {
        //sorts = sorts[0];
        var html = '[';
        for (var i = 0; i < orderLen; i++) {
            var html_str = '[';
            html_str += '"' + sorts[i][0] + '",' + sorts[i][1] + ']';
            if (i != orderLen - 1) {
                html += html_str + ',';
            } else {
                html += html_str + ']';
            }
        }
        console.log(html);
        params.orderList = [[sort[0]]];
    }*/
    if (sorts && orderLen > 0) {
        params.orderList = '[["' + sorts[orderLen - 1][0] + '",' + sorts[orderLen - 1][1] + "]]";
    }
    return params;
}

function getSearchParams(tableId, columns) {
    var $form = $("#" + tableId + "-searchArea"),
        formData = $form.serializeArray(),
        params = {};
    for (var i = 0, len = formData.length; i < len; i++) {
        var formName = formData[i].name,
            colName = formName.split("-|-")[1],
            value = formData[i].value;

        //去除前后空格
        value = value && value.trim();
        for (var k= 0, colsLen=columns.length; k < colsLen; k++) {
            if (colName===columns[k].name) {
                var ratio = columns[k].ratio,
                    multiple = columns[k].advQry && columns[k].advQry.indexOf("IN")>-1;
                value = value && ratio ? value * ratio : value;
                break;
            }
        }
        //IN查询：检查advQry=IN, 逗号分隔多个值
        /*
        修改搜索框参数
        2017.12.13
        sam

        params[formName] = multiple && params[formName]!==undefined ? params[formName]+ ","+ value: value;
        */
        if (formName.indexOf("LIKE") >0 || formName.indexOf("IN") >0){
            params[colName] = multiple && params[colName]!==undefined ? params[colName]+ ","+ value: value;
        }else if (formName.indexOf("GTE") >0){
            params['start' + titleCase(colName)] = multiple && params['start' + titleCase(colName)]!==undefined ? params['start' + titleCase(colName)]+ ","+ value: value;
        }else if (formName.indexOf("LTE") >0){
            params['end' + titleCase(colName)] = multiple && params['end' + titleCase(colName)]!==undefined ? params['end' + titleCase(colName)]+ ","+ value: value;
        }else{
            params[formName] = multiple && params[formName]!==undefined ? params[formName]+ ","+ value: value;
        }
    }
    return params;
}

function createTabEntityById(tableId) {
    var items = $("#" + tableId).data(KEY_TABLE_ITEMS),
        resultList = $("#" + tableId).data("queryData"),
        localStrg = getLocalStorageModel(tableId, KEY_TABLE_LS);
    createTabEntity(tableId, resultList, items, localStrg);
}

function createTabEntity(tableId, resultList, items, localStrg) {
    var i18nPrefix = items.i18nPrefix,
        itemsArr = items.trs,
        tableKey = items.tableKey,
        detailObj = items.customComps && items.customComps.detail,
        detailClickE = detailObj && detailObj.click && typeof detailObj.click === "function" ? detailObj.click : undefined;
    sorts = localStrg.sorts,
        showCols = localStrg.showCols,
        columnArr = [];
    for (var i = 0, itemslen = itemsArr.length; i < itemslen; i++) {
        var name = itemsArr[i].name;
        for (var j = 0, colLen = showCols.length; j < colLen; j++) {
            if (name == showCols[j][0] && showCols[j][1] == true) {
                columnArr.push(itemsArr[i]);
                break;
            }
        }
    }
    var html_thead = createTableHeadHtml(tableId, columnArr, sorts, i18nPrefix);
    var html_tdata = createTableBodyHtml(tableId, resultList, columnArr, i18nPrefix, tableKey);
    $("#" + tableId + "-thead").html(html_thead);
    $("#" + tableId + "-body").html(html_tdata);
    /*$("#" + tableId + "-body").find("tr").on("dblclick ", function () {
        detailClickE ? detailClickE(tableId) : viewDetail(tableId);
    });*/

    var touchtime = new Date().getTime();
    $("#" + tableId + "-body").find("tr").on("click ", function () {
        if( new Date().getTime() - touchtime < 500 ){
            detailClickE ? detailClickE(tableId) : viewDetail(tableId);
        }else{
            touchtime = new Date().getTime();
        }
    });

    if (resultList.length == 0) {
        $("#" + tableId + "-body-noData").show();
    } else {
        $("#" + tableId + "-body-noData").hide();
    }
}

function createTableHeadHtml(tableId, columnArr, sorts, i18nPrefix) {
    var html_thead = "<th style='background-color: inherit;border:none;' ><label class='no-margin-bottom'><input type='checkbox' class='inverted EUBtn-blue' id='" + tableId +
        "-tableCheckAllBtn' onclick='checkAllRows(\"" + tableId + "\")'><span class='text'></span></label></th>";
    for (var m = 0, colLen = columnArr.length; m < colLen; m++) {
        var sort_str = "",
            sortHtml = "",
            columnName = columnArr[m].name,
            columnWidth = (columnArr[m].width) ? (columnArr[m].width) : 80,
            columnI18n = getJsonData(i18nPrefix + columnName) || getJsonData("db.common." + columnName),
            theadId = "th-" + tableId + "-" + columnName;
        if (columnArr[m].sort) {
            sort_str = "sorting";
            if (sorts && sorts.length > 0) {
                for (var y = 0, sortsLen = sorts.length; y < sortsLen; y++) {
                    if (columnArr[m].name == sorts[y][0]) {
                        if (sorts[y][1] == 1) {
                            sort_str = "sorting_asc";
                        } else {
                            sort_str = "sorting_desc";
                        }
                        break;
                    }
                }
            }
            sortHtml += " class='" + sort_str + "' onClick='rowsSort(\"" + tableId + "\",\"" + columnName + "\")'";
        }
        html_thead += "<th draggable='false' style='background-color: inherit;border:none;font-weight: bold;' " + sortHtml + " id='" + theadId + "' name='" + columnName
            + "'onmousedown=\"thOnMouseDownModel('" + tableId + "','" + columnName + "')\"" + " >"// up和move方法移动到thread和body上去了
            + "<div class='table-data' draggable='false' style='width: " + columnWidth + "px;'>" + columnI18n + "</div></th>";
    }
    return html_thead;
}

function createTableBodyHtml(tableId, resultList, columnArr, i18nPrefix, tableKey) {
    //临时

    var attach = $("#"+tableId).data("attachList");
    var html_tdata = "";
    for (var n = 0, resultLen = resultList.length; n < resultLen; n++) {
        var tableKeyValue = resultList[n][tableKey];
        html_tdata += "<tr onclick='selectThisRow(\"" + tableId + "\",\"" + n + "\")' >" +//onDblClick='viewDetail(\""+tableId+"\",\""+n+"\")'
            "<td><label style='margin-bottom:0;' onclick='event.stopPropagation()'>" +
            "<input type='checkbox' class='inverted EUBtn-blue' name='" + tableId + "-rowItems" + n + "' value='" + tableKeyValue + "-|-" + n +
            "' onclick='changeSelectRows(\"" + tableId + "\")'><span class='text'></span></label></td>";
        for (var k = 0, arrLen = columnArr.length; k < arrLen; k++) {
            var isFirstRow = n == 0,
                tipContent = "",
                columnData = columnArr[k],
                isTip = columnData.tip, name = columnData.name, width = columnData.width,
                rowData = resultList[n],
                rowContent = formatData2Html(i18nPrefix, columnArr[k], rowData, isFirstRow);
            if (isTip && rowContent) {
                tipContent = '<div class="' + (isFirstRow ? "f-tips" : "f-t-tips") + '">' +
                    (typeof isTip==="function"? isTip(rowData[name]): rowContent)+ '</div>';
            }
            html_tdata += '<td><div class="f-p-tips" name="' + name + '"><div style="width:' + width + 'px;overflow: hidden;' +
                'word-break: keep-all;text-overflow: ellipsis;height: 35px;line-height: 33px;">' + rowContent + '</div>' + tipContent + '</div></td>';
        }
        html_tdata += "</tr>";
    }
    return html_tdata;
}

function formatData2Html(i18nPrefix, columnParam, rowData) {
    var name = columnParam.name,
        comType = columnParam.comType,
        rowContent = rowData[name],
        valFormat = columnParam.valFormat,
        ratio = columnParam.ratio,
        decimals = columnParam.vali.decimals,
        newContent = "";
    //屏蔽界面上的undefined和null
    rowContent = (rowContent === undefined || rowContent === null) ? "" : rowContent;
    if (ratio) {
        //保留兩位小数 sam修改
        if (decimals){
            rowContent = (rowContent / ratio).toFixed(decimals);
        }else{
            rowContent = (rowContent / ratio).toFixed(2);
        }
        //rowContent = rowContent / ratio;
    }
    if (valFormat) {
        try {
            if (typeof valFormat === "function") {
                newContent = valFormat(rowContent, rowData);
            } else if (typeof valFormat === "string") {
                newContent = eval(valFormat + "(\"" + rowContent + "\")");
            }
        } catch (e) {
            console.log(e);
            return "format function error!";
        }
    } else if (comType === "select") {
        var comData = columnParam.comData && columnParam.comData.data;
        for (var i = 0; i < comData.length; i++) {
            if (comData[i][0].toString() === rowContent.toString()) {
                newContent = comData[i][1];
                break;
            }
        }
    }
    //如果内容中存在提示框（f-tips || f-t-tips）,根据
    if (columnParam.priceFM) {
        // N: normal   H:highLight
        rowContent = columnParam.priceFM === "N" ? priceFormat(rowContent) : priceFormatHighLight(rowContent);
    }
    if (columnParam.wifiAreaFM || (comType === "ajaxSelect" && columnParam.comDataS2 && columnParam.comDataS2.wifiAreaFM)) {
        newContent = rowContent && wifiAreaTdFormat(rowContent);
    }
    return newContent ? newContent : rowContent;
}
/**
 * 价格格式化
 *    保持小数位一致，默认统一2位
 * @param value 价格
 * @param decimals 保留小数位
 * @param ratio 倍率（除以该倍率）
 */
function priceFormatHighLight(value) {
    var valSplit = value.toString().split("."),
        decimals = valSplit && valSplit.length === 2 ? valSplit[1].length : 0;
    switch (decimals) {
        case 0 :
            value += ".00";
            break;
        case 1 :
            value += "0";
            break;
        default:
            value = Math.ceil(value * 100) / 100;
    }
    return '<span class="label label-info" style="width:80px;text-align:center;">' + value + '</span>';
}   

function priceFormat(value, style) {
    var valSplit = value.toString().split("."),
        decimals = valSplit && valSplit.length === 2 ? valSplit[1].length : 0;
    switch (decimals) {
        case 0 :
            value += ".00";
            break;
        case 1 :
            value += "0";
            break;
        default:
            value = Math.ceil(value * 100) / 100;
    }
    return '<div style="width:80px;text-align:center;">' + value + '</div>';
}

function trafficCommonFM(value) {
    var valSplit = value.toString().split("."),
        decimals = valSplit && valSplit.length === 2 ? valSplit[1].length : 0;
    switch (decimals) {
        case 0 :
            value += ".000";
            break;
        case 1 :
            value += "00";
            break;
        case 2 :
            value += "0";
            break;
        default:
            value = Math.ceil(value * 1000) / 1000;
    }
    return value;
}

function resetToolsBtnStatus(tableId) {
    var tableItems = $("#" + tableId).data(KEY_TABLE_ITEMS),
        custom = tableItems.customComps && tableItems.customComps.custom;
    if (custom && isArray(custom)) {
        for (var i = 0; i < custom.length; i++) {
            var obj = custom[i], name = obj.name, color = obj.color, associated = obj.associated,
                $custom = $('#' + tableId + "-tools-" + name);
            if (associated !== false) {
                $custom.removeAttr("disabled").attr("disabled", "disabled").removeClass(color).addClass("gray_tableModal");
            }
        }
    }
    $("#" + tableId + "-tools-detail").removeAttr("disabled").attr("disabled", "disabled").removeClass("blue").addClass("gray_tableModal");
    $("#" + tableId + "-tools-edit").removeAttr("disabled").attr("disabled", "disabled").removeClass("primary").addClass("gray_tableModal");
    $("#" + tableId + "-tools-delete").removeAttr("disabled").attr("disabled", "disabled").removeClass("danger").addClass("gray_tableModal");
    $("#viFiDeviceNewTab3-tools-batchImport").removeAttr("disabled");
    $("#viFiDeviceNewTab3-tools-batchImport").removeClass("gray_tableModal").addClass("primary");
}

function getFirstSelectedRow(tableId) {
    var checkedRows = $("#" + tableId + "-body").find("input[name*=" + tableId + "-rowItems]:checked");
    if (checkedRows && checkedRows.length > 0) {
        var number = checkedRows[0].value.split("-|-");
        return number[1];
    }
    return 0;
}
//单行与批量
function getSelectedRows(tableId) {
    var checkedRows = $("#" + tableId + "-body").find("input[name*=" + tableId + "-rowItems]:checked");
    if (checkedRows && checkedRows.length === 1) {
        var number = checkedRows[0].value.split("-|-");
        return number[1];
    } else {
        var result = [];
        for (var i = 0, len = checkedRows.length; i < len; i++) {
            result.push(checkedRows[i].value);
        }
        return result;
    }
}

function getSelectedRowData(tableId) {
    var queryData = $("#" + tableId).data("queryData"),
        number = 0;
    var checkedRows = $("#" + tableId + "-body").find("input[name*=" + tableId + "-rowItems]:checked");
    if (checkedRows && checkedRows.length > 0) {
        var value = checkedRows[0].value.split("-|-");
        number = value[1];
    }
    return queryData[number];
}

function viewDetail(tableId, number) {
    number = getFirstSelectedRow(tableId, number);
    createDetailDialog(tableId, number);
    showDialogModel(tableId, "detail");
}

//新增 && 单行编辑 && 多行编辑
function viewEditOrAdd(event, tableId, type) {
    if ((!tableId || !type) && event.data) {
        tableId = event.data.tabId;
        type = event.data.type;
    }
    var rows = getSelectedRows(tableId);
    if (isArray(rows) && rows.length > 0 && type === "edit") {
        createBatchEditModal(tableId, rows);
        showDialogModel(tableId, "batchEdit");
    } else {
        createEditDialog(tableId, type, rows);
        showDialogModel(tableId, type);
    }
}

function createBatchEditModal(tableId, rows) {
    var $table = $("#" + tableId),
        tableLocal = $table.data(KEY_TABLE_ITEMS),
        tableItems = tableLocal.trs,
        tableKey = tableLocal.tableKey,
        i18nPrefix = tableLocal.i18nPrefix,
        itemsLen = tableItems.length,
        idList = [],
        tkVal = "",
        html = [];
    if (!tableLocal.batchEdit || !rows || !isArray(rows)) {
        return;
    }
    for (var i = 0, len = rows.length; i < len; i++) {
        var tk = rows[i].split("-|-");
        tk.length > 0 && idList.push(tk[0]);
    }
    tkVal += idList[0] + "..." + idList[idList.length - 1] + "," + getJsonData("totalFor") + idList.length + getJsonData("items");
    for (var i = 0; i < itemsLen; i++) {
        var item = tableItems[i],
            name = item.name,
            batchEdit = item.batchEdit,
            vali = item.vali,
            comType = item.comType;
        if (!batchEdit && name !== tableKey) {
            continue;
        }
        var content = "";
        if (comType === "select" || comType === "ajaxSelect") {
            content += '<select id="edit-' + tableId + '-' + name + '" name="' + name + '" style="width: 100%;"></select>';
        } else {
            var laydateHtml = "";
            if (vali.date) {
                var choose = "laydateCallbackModel&|" + tableId + "&|" + name;
                laydateHtml = "onclick='laydate.render({type:\"datetime\",elem:this,istime: true, format: \"" + vali.dateFormat + "\",choose:\"" + choose + "\"})'";
            }
            content += '<input type="text" id="edit-' + tableId + '-' + name + '" name="' + name + '"' + ' placeholder="' + getJsonData(i18nPrefix + name + ".help") +
                '" class="form-control input-sm laydate-input layer-date"' + laydateHtml + '>';
        }

        html.push(
            '<div class="form-group slideFlag-' + name + '">',
            '<div><label class="control-label col-sm-3" style="padding-left:0px;padding-right:0px">',
            (getJsonData(i18nPrefix + name) + ':'),
            '<span class="required" style="color:red;width:8px;display:inline-block;margin:0 5px 0 10px;">',
            '</span></label>',
            '<div class="col-sm-8" style="padding-left:0;padding-right:0;">',
            '<div id="' + tableId + '-comContent-' + name + '">',
            (name === tableKey ? ('<input type="text" disabled="disabled" class="form-control input-sm" value="' + tkVal + '"/>') : content),
            '</div ></div>',
            // '<div class="col-sm-1">',
            // (name===tableKey
            //     ? ('<a class="btn btn-blue btn-sm icon-only white" onclick="slideToggleBatchModal(\''+tableId+'\')" href="javascript:void(0);"><i class="la la-undo "></i></a>')
            //     : ('<a class="btn btn-danger btn-sm icon-only white" onclick="slideToggleBatchModal(\''+tableId+'\',\''+name+'\')" href="javascript:void(0);"><i class="la la-times "></i></a>')),
            // '</div>',
            '</div></div>'
        );
    }

    var result = [
        '<div class="modal fade modal-primary" id="' + tableId + '-batchEdit">',
        '<div class="modal-dialog"><div class="modal-content">',
        '<form id="' + tableId + '-batchEdit-form" class="form-horizontal" onchange="formChangeModal()">',
        '<div class="modal-header">',
        '<button type="button" class="close" onclick="removeModal(\'' + tableId + '\',\'batchEdit\')"><span>&times;</span></button>',
        '<h4 class="modal-title text-primary">' + getJsonData("batchEdit") + '</h4>',
        '</div>',
        '<div style="padding-top:15px;">',
        '<input type="hidden" name="idList"/>',// value="'+ JSON.stringify(idList)+'"
        html.join(''),
        '<div style="padding: 0 140px;color:red;"><span>*' + getJsonData("label.tips.batchEditEmpty") + '</span></span></div>',
        '</div>',
        '<div class="modal-footer " style="background-color:#FFFFFF;">',
        '<button type="submit" class="el-button el-button--primary">' + getJsonData("save") + '</button>',
        '<a class="el-button el-button--default" onclick="removeModal(\'' + tableId + '\',\'batchEdit\')">' + getJsonData("cancel") + '</a>',
        '</div>',
        '</form></div></div>'
    ];
    $table.append(result.join(''));
    $("#" + tableId + "-batchEdit").find("[name=idList]").data("data-submit", idList);
    fillBatchEditModalContent(tableId);
    $(".laydate-input").click();
}

// function slideToggleBatchModal(tableId, name ){
//     var $modal = $("#"+tableId +"-batchEdit");
//     if( name ){
//         $modal.find(".slideFlag-"+name).slideToggle(120);
//     }else{
//         var cols = $("#"+tableId).data(KEY_TABLE_ITEMS).trs;
//         for(var i=0, len=cols.length; i<len; i++) {
//             var item = cols[i],
//                 $col = $modal.find(".slideFlag-"+item.name),
//                 batchEdit = item.batchEdit;
//             if( batchEdit && $col.is(":hidden")){
//                 $col.slideToggle(120);
//             }
//         }
//     }
// }

function createDetailDialog(tableId, number) {
    var tableParams = $("#" + tableId).data(KEY_TABLE_ITEMS),
        tableItems = tableParams.trs,
        i18nPrefix = tableParams.i18nPrefix,
        queryData = $("#" + tableId).data("queryData"),
        permissions = tableParams.initParams.permissions,
        customComps = tableParams.customComps,
        dataRow = queryData[number],
        itemsLen = tableItems.length,
        html = "";
    
    for (var i = 0; i < itemsLen; i++) {
        //参数:detailShow为false时不显示 by sam
        var detailShowFlag = (tableItems[i].detailShow != undefined) ? tableItems[i].detailShow : true;
        if (detailShowFlag){
            var name = tableItems[i].name,
                i18nKey = getJsonData(i18nPrefix + name) || getJsonData("db.common." + name),
                content = formatData2Html(i18nPrefix, tableItems[i], dataRow, false);
            html += "<tr class=\"ng-scope\"><td class=\"text-right\" width='32%'> " + i18nKey +
                ": </td><td class='right-border-none'><div style='word-wrap:break-word;word-break: break-all;' class=\"f-p-tips f-p-tips-button\">" + content + "</div></td></tr>";
        }
    }
    //<i class="la la-book" ></i>详情ICON旧版本
    var modalStyle = tableParams.expandDetail ? 'style="width:50vw;"' : '';
    var totalHtml = '<div class="modal fade modal-primary" id="' + tableId + '-detail"  role="dialog" aria-hidden="true">' +
        '<div class="modal-dialog" ' + modalStyle + '><div class="modal-content"><div class="modal-header">' +
        '<button type="button" class="close" onclick="removeModal(\'' + tableId + '\',\'detail\')" aria-label="Close"><span aria-hidden="false">×</span></button>' +
        '<h4 class="modal-title text-info">' + getJsonData("details") + '</h4></div>' +
        '<div class="modal-body bg-white no-padding" style="overflow-y:auto;max-height: 80vh;">';// overflow,这个容器即使浮动也具有高度
    if (tableParams.expandDetail) {
        var result = tableParams.expandDetail(tableId, number);
        var col = result.col;
        var detailHtml = result.detailHtml;
        /*totalHtml += '<div class="col-sm-' + col + '" style="padding:0px;"><div><table class="table table-bordered table-striped ' +
                ' detailTable" style="border-right:1px solid #ddd !important;"><tbody>' + html +
                '</tbody></table></div></div><div class="col-sm-' + (12 - col) + '">' + detailHtml + '</div>';*/

        if (col){
            totalHtml += '<div class="col-sm-' + col + '" style="padding:0px;"><div><table class="table table-bordered table-striped ' +
                ' detailTable" style=""><tbody>' + html +
                '</tbody></table></div></div><div class="col-sm-' + (12 - col) + '">' + detailHtml + '</div>';
        }else{
            totalHtml += '<div><table class="table table-bordered table-striped  detailTable"><tbody>' + html + '</tbody></table></div>';
        }
    } else {
        totalHtml += '<div><table class="table table-bordered table-striped  detailTable"><tbody>' + html + '</tbody></table></div>';
    }

    var style = ' style="font-size: 14px;padding: 4px 12px;margin-left:3.56px;float:left;" ';
    totalHtml += '</div><div class="modal-footer">';
    //if (permissions[2] == 0 && isEmptyObject(customComps)) {
    if (permissions[2] == 0) {
        totalHtml += '<div class="btn blue f-p-tips f-p-tips-button " ' + style + ' id="' + tableId + '-skip2EditModal" onclick="skip2EditModalG(\'' + tableId + '\')">'
            + '<i class="la editIcon"></i><div class="f-t-tips">' + getJsonData("edit") + '</div></div>';
    }
    totalHtml += '<button class="el-button el-button--default" onclick="removeModal(\'' + tableId + '\',\'detail\')" aria-label="Close">' + getJsonData("close") + '</button>' +
        '</div></div></div></div>';
    $("body").append(totalHtml);
}

function createEditDialog(tableId, type, number) {
    var tableLocal = $("#" + tableId).data(KEY_TABLE_ITEMS),
        tableItems = tableLocal.trs,
        tableKey = tableLocal.tableKey,
        i18nPrefix = tableLocal.i18nPrefix,
        customComps = tableLocal.customComps,
        itemsLen = tableItems.length,
        data = $("#"+tableId).data("queryData"),
        permissions = tableLocal.initParams.permissions,
        tableKeyHtml = "",
        itemHtmlArr = [];
    
    //超级用户无法编辑
    if (tableLocal.initParams.tableId == "frmuserTab" && type == "edit"){
        if (data[number].ucpUserType){
            layer.msg.error("无权编辑该用户");
            return false;
        }
    }

    for (var i = 0; i < itemsLen; i++) {
        var item = tableItems[i],
            name = item.name,
            hideEdit = item.hideEdit,
            disabled = item.disabled,
            vali = item.vali,
            comType = item.comType,
            html = "";
        var disabledFlag = disabled && (disabled == "A" || (disabled == "E" && type == "edit") || (disabled == "N" && type == "new"));
        var hideEditFlag = hideEdit && (hideEdit == "A" || (hideEdit == "E" && type == "edit") || (hideEdit == "N" && type == "new"));
        var disabledHtml = disabledFlag ? 'disabled="disabled"' : "";
        var requiredHtml = item.vali.required ? '<b>*</b>' : "";
        if (hideEditFlag) {
            if (name == tableKey && type == "edit") {
                //!!这里不能用name=name，会触发校验
                tableKeyHtml = '<div class="form-group"><input type="hidden" class="' + tableId + name + '"/></div>';
            }
            continue;
        }
        html += '<div class="form-group"><div data-input="">' +
            '<label class="control-label col-sm-3" style="padding-left:0px;padding-right:0px">' + getJsonData(i18nPrefix + name) + ':' +
            '<span class="required" style="color:red;width:8px;display:inline-block;margin:0 5px 0 10px;">' +
            requiredHtml + '</span></label><div class="col-sm-8" style="padding-left:0;padding-right:0;"><div class="ng-scope" id="' + tableId + '-comContent-' + name + '">';
        /*if (comType == "select" || comType == "ajaxSelect") {
            html += '<select id="edit-' + tableId + '-' + name + '" name="' + name + '" style="width: 100%;"></select>';
        } else {
            var laydateHtml = "";
            if (vali.date) {
                var choose = "laydateCallbackModel&|" + tableId + "&|" + name;
                if (vali.minDate){
                    laydateHtml = "onclick='laydate.render({min:min,type:\"datetime\",elem:this,istime: true, format: \"" + vali.dateFormat + "\",choose:\"" + choose + "\"})'";
                }else{
                    laydateHtml = "onclick='laydate.render({type:\"datetime\",elem:this,istime: true, format: \"" + vali.dateFormat + "\",choose:\"" + choose + "\"})'";
                }
                
            }
            html += '<input type="text" id="edit-' + tableId + '-' + name + '" name="' + name + '"' + disabledHtml + ' placeholder="' + getJsonData(i18nPrefix + name + ".help") +
                '" class="form-control input-sm laydate-input layer-date"' + laydateHtml + '>';
        }*/
        if (comType == "select" || comType == "ajaxSelect") {
            html += '<select id="edit-' + tableId + '-' + name + '" name="' + name + '" style="width: 100%;"></select>';
        } else if (comType == "upload"){//上传插件 by sam
            if (item.uploadKey.uploadType == "img"){
                html += '<input type="file" id="edit-' + tableId + '-' + name + '" name="' + name + '" class="dropify"/>';
            }else{
                html += '<input type="file" id="edit-' + tableId + '-' + name + '" name="' + name + '"/>';
            }
        }else if (comType == "checkbox"){
            var tips = item.checkboxText ? item.checkboxText : "";
            html += '<label class="modalCheckbox" style="margin: 0px;"><input type="checkbox" id="edit-' + tableId + '-' + name + '" name="' + name + '"><span class="text"></span></label>' + tips;
        }else if (comType == "radio"){
            html += '<div class="modalRadio" id="edit-' + tableId + '-' + name + '"></div>';
            //后面填充
        }else{
            var laydateHtml = "";
            //老版本
            /*if (vali.date) {
                var choose = "laydateCallbackModel(\"" + tableId + "\",\"" + name + "\")";
                if (vali.minDate){
                    laydateHtml = "onclick='laydate.render({min:min,type:\"datetime\",elem:this,istime: true, format: \"" + vali.dateFormat + "\",done:\"" + choose + "\"})'";
                }else{
                    laydateHtml = "onclick='laydate.render({type:\"datetime\",elem:this,istime: true, format: \"" + vali.dateFormat + "\",done:" + choose + "})'";
                }                
            }*/
            if (vali.date) {
                html += '<input type="text" id="edit-' + tableId + '-' + name + '" name="' + name + '"' + disabledHtml + ' placeholder="' + getJsonData(i18nPrefix + name + ".help") +
                '" class="form-control input-sm laydate-input layer-date date-input"><i class="el-input__icon el-icon-date dateSelectIcon"></i>';  
            }else{
                html += '<input type="text" id="edit-' + tableId + '-' + name + '" name="' + name + '"' + disabledHtml + ' placeholder="' + getJsonData(i18nPrefix + name + ".help") +
                '" class="form-control input-sm laydate-input layer-date">';
            }
        }
        html += '</div></div></div></div>';
        itemHtmlArr.push(html);
    }
    var itemHtmlArrLen = itemHtmlArr.length;
    var halfFlag = itemHtmlArr && itemHtmlArrLen > 50 ? true : false,//是否分左右栏，暂取消：itemHtmlArr&&itemHtmlArrLen>12
        bigger = halfFlag ? "modal-lg" : "",
        halfLen = halfFlag ? Math.ceil(itemHtmlArrLen / 2) : 0,
        totalHtml = "", itemHtmlArrTotal = "";
    itemHtmlArrTotal += halfFlag ? '<div class="col-sm-6">' : "";
    for (var i = 0; i < itemHtmlArrLen; i++) {
        itemHtmlArrTotal += itemHtmlArr[i];
        if (halfFlag && (i + 1) == halfLen) {
            itemHtmlArrTotal += '</div><div class="col-sm-6">';
        }
    }
    itemHtmlArrTotal += halfFlag ? '</div>' : "";
    var style = ' style="font-size: 14px;padding: 4px 12px;margin-left:3.56px;float:left;" ';
    totalHtml += '<div class="modal fade modal-primary" id="' + tableId + '-' + type + '"  aria-hidden="true"><div class="modal-dialog ' + bigger + '">' +
        '<div class="modal-content"><form id="' + tableId + '-' + type + '-form" class="form-horizontal" onchange="formChangeModal()">' +
        '<div class="modal-header"><button type="button" class="close" onclick="removeModal(\'' + tableId + '\',\'' + type + '\')"><span aria-hidden="true">&times;</span></button>' +
        //<input type="hidden" id="'+tableId +'-editAddType" value="'+type+'" />
        '<h4 class="modal-title smaller" id="' + tableId + '-header"></h4></div>' +
        '<div class="ng-scope" style="padding-top:15px;">' + tableKeyHtml + itemHtmlArrTotal +
        '</div><div class="modal-footer " style="background-color:#FFFFFF;">';
    //if ((type === "edit" && permissions[0] === "0") && isEmptyObject(customComps)) {
    if (type === "edit" && permissions[0] === "0") {
        totalHtml += '<div  class="btn primary f-p-tips f-p-tips-button " ' + style + ' onclick="skip2DetailModalG(\'' + tableId +
            '\')"><i class="la la-book"></i>' + '<div class="f-t-tips">' + getJsonData("details") + '</div></div>';
    }
    totalHtml += '<button type="submit" class="el-button el-button--primary">' + getJsonData("save") + '</button>'
        + '<a class="el-button el-button--default" onclick="removeModal(\'' + tableId + '\',\'' + type + '\')">' + getJsonData("cancel") + '</a></div>';
    $("body").append(totalHtml);
    fillModalContent(tableId, type, number);

    //初始化插件
    initUploadPlug(tableId);
    initDatePlug(tableId, type);

    //初始化checkbox
    $("#" + tableId + "-" + type + '-form').find(".modalCheckbox").on("change", {tabId: tableId}, function (e) {
        var target = e.target || e.srcElement,
            $target = $(target)

        if ($target.attr("checked")){
            $target.attr("checked",false);
        }else{
            $target.attr("checked",true);
        }
    });
}
function initDatePlug(tableId, type){
    var tableLocal = $("#" + tableId).data(KEY_TABLE_ITEMS),
        tableItems = tableLocal.trs,
        itemsLen = tableItems.length;

    for (var i = 0; i < itemsLen; i++) {
        var item = tableItems[i];
        if (item.vali.date){
            var name = item.name,
                selector = '#edit-' + tableId + '-' + name;
            if (item.vali.minDate){
                laydate.render({
                  type:"datetime",
                  elem:selector,
                  min:"min",
                  done: function(value, date, endDate){
                    //mmp!!!!垃圾laydate還要手动赋值！！
                    $(selector).val(value);
                    laydateCallbackModel(tableId,name, type);
                  }
                });
            }else{
                laydate.render({
                  type:"datetime",
                  elem:selector,
                  done: function(value, date, endDate){
                    $(selector).val(value);
                    //mmp!!!!垃圾laydate還要手动赋值！！
                    laydateCallbackModel(tableId,name, type);
                  }
                });
            }
        }
    }
}

//日期回调 eval执行，有用到
function laydateCallbackModel(tableId, fieldName,type) {
    if (type == "edit"){
        //编辑
        var $editModal = $("#" + tableId + "-edit-form"),
            $batchEditModal = $("#" + tableId + "-batchEdit-form");
        $editModal.length > 0 && $editModal.data("bootstrapValidator").resetForm().validateField(fieldName);
        $batchEditModal.length > 0 && $batchEditModal.data("bootstrapValidator").resetForm().validateField(fieldName);
    }else{
        //新增
        var $newModal = $("#" + tableId + "-new-form");
        $newModal.length > 0 && $newModal.data("bootstrapValidator").resetForm().validateField(fieldName);
    }
}

function initUploadPlug(tableId){
    /*参数说明
    defaultFile: 如果有默认文件可使用它。可以在使用插件时初始化此选项，或直接在DOM元素中使用data-default-file="url_of_your_file"（推荐）
    height: dropify元素高度。或如下例子设置DOM元素属性： data-height="300" 
    maxFileSize: 设置上传文件大小。如果超出设置大小则显示错误信息。单位有：K, M 和 G,默认值：5M
    minWidth: 设置最小宽度。超出此选项会显示错误信息
    maxWidth: 设置最大宽度。超出此选项会显示错误信息
    minHeight: 设置最小高度。超出此选项会显示错误信息
    maxHeight: 设置最大高度。超出此选项会显示错误信息
    disabled: 使控件失效。
    showRemove: 显示移除按钮。默认为true.
    showLoader: 显示加载器。默认: true.
    showErrors: 是否显示错误信息，默认: true.
    errorsPosition: 错误信息显示位置，有两选项：overlay or outside。默认： overlay.
    allowedFormats: 设置允许通过或拒绝的图片格式。如添加属性 data-allowed-formats="portrait square"只允许portrait和square图上传。默认值：
    allowedFileExtensions: 允许文件扩展名。例如添加属性 data-allowed-file-extensions="pdf png psd" 将允许PDF, PNG 和 PSD 文件上传默认值所有扩展名都允许： ['*'].
    maxFileSizePreview: 设置预览文件大小的最大值(假设为图片)。如果文件大小超出此值，那么只有文件图标而不显示预览图。单位有K, M 和 G。
    */
    var tableLocal = $("#" + tableId).data(KEY_TABLE_ITEMS),
        tableItems = tableLocal.trs,
        itemsLen = tableItems.length;

    for (var i = 0; i < itemsLen; i++) {
        var item = tableItems[i],
            comType = item.comType;
        if (comType == "upload"){
            var uploadUrl = item.uploadKey.uploadUrl,
                name = item.name,
                selector = '#edit-' + tableId + '-' + name,
                height = item.uploadKey.height,
                maxFileSize = item.uploadKey.maxFileSize,
                minWidth = item.uploadKey.minWidth,
                maxWidth = item.uploadKey.maxWidth,
                minHeight = item.uploadKey.minHeight,
                maxHeight = item.uploadKey.maxHeight,
                disabled = item.uploadKey.disabled,
                showRemove = item.uploadKey.showRemove,
                showLoader = item.uploadKey.showLoader,
                showErrors = item.uploadKey.showErrors,
                errorsPosition = item.uploadKey.errorsPosition,
                allowedFormats = item.uploadKey.allowedFormats,
                allowedFileExtensions = item.uploadKey.allowedFileExtensions,
                maxFileSizePreview = item.uploadKey.maxFileSizePreview;

            (height) ? $(selector).attr("data-height",height) : $(selector).removeAttr("data-height");
            (maxFileSize) ? $(selector).attr("data-max-file-size",maxFileSize) : $(selector).removeAttr("data-max-file-size");
            (minWidth) ? $(selector).attr("data-min-width",minWidth) : $(selector).removeAttr("data-min-width");
            (maxWidth) ? $(selector).attr("data-max-width",maxWidth) : $(selector).removeAttr("data-max-width");
            (minHeight) ? $(selector).attr("data-min-height",minHeight) : $(selector).removeAttr("data-min-height");
            (maxHeight) ? $(selector).attr("data-max-height",maxHeight) : $(selector).removeAttr("data-max-height");
            (disabled) ? $(selector).attr("disabled",disabled) : $(selector).removeAttr("disabled");
            (showRemove) ? $(selector).attr("data-show-remove",showRemove) : $(selector).removeAttr("data-show-remove");
            (showLoader) ? $(selector).attr("data-show-loader",showLoader) : $(selector).removeAttr("data-show-loader");
            (showErrors) ? $(selector).attr("data-show-errors",showErrors) : $(selector).removeAttr("data-show-errors");
            (errorsPosition) ? $(selector).attr("data-errors-position",errorsPosition) : $(selector).removeAttr("data-errors-position");
            (allowedFormats) ? $(selector).attr("data-allowed-formats",allowedFormats) : $(selector).removeAttr("data-allowed-formats");
            (allowedFileExtensions) ? $(selector).attr("data-allowed-file-extensions",allowedFileExtensions) : $(selector).removeAttr("data-allowed-file-extensions");
            (maxFileSizePreview) ? $(selector).attr("data-max-file-size-preview",maxFileSizePreview) : $(selector).removeAttr("data-max-file-size-preview");

            var drEvent = $(selector).dropify({
                messages: {
                    default: '拖拽文件或者点击上传',
                    replace: '拖拽文件或者点击更改',
                    remove:  '删除',
                    error:   '上传文件失败'
                },
                error: {'fileSize': '文件过大 ({{ value }}最大).',
                        'minWidth': '图片宽度太小 ({{ value }}}px 最小).',
                        'maxWidth': '图片宽度太大 ({{ value }}}px 最大).',
                        'minHeight': '图片高度太小 ({{ value }}}px 最小).',
                        'maxHeight': '图片高度太大 ({{ value }}px 最大).',
                        'imageFormat': '文件格式不允许 (只允许{{ value }} ).',
                        'fileExtension': '文件格式不允许 (允许格式：{{ value }}).'
                }
                /*tpl: {
                    wrap:            '<div class="dropify-wrapper"></div>',
                    loader:          '<div class="dropify-loader"></div>',
                    message:         '<div class="dropify-message"><span class="file-icon" /> <p>{{ default }}</p></div>',
                    preview:         '<div class="dropify-preview"><span class="dropify-render"></span><div class="dropify-infos"><div class="dropify-infos-inner"><p class="dropify-infos-message">{{ replace }}</p></div></div></div>',
                    filename:        '<p class="dropify-filename"><span class="file-icon"></span> <span class="dropify-filename-inner"></span></p>',
                    clearButton:     '<button type="button" class="dropify-clear">{{ remove }}</button>',
                    errorLine:       '<p class="dropify-error">{{ error }}</p>',
                    errorsContainer: '<div class="dropify-errors-container"><ul></ul></div>'
                }*/
            });

            drEvent.on('dropify.afterClear',function(event, element) {
                $(selector).removeAttr("value");
            });

            drEvent.on('dropify.errors',function(event, element) {
                $(selector).removeAttr("value");
            });

            drEvent.on('dropify.fileReady', function(event, previewable, src){
                var that = this;
                if(previewable) {
                    var formData = new FormData();
                    //var blob = dataURItoBlob(src);
                    formData.append("file", event.target.files[0],event.target.files[0].name);
                    var uploadParam = setSignList({},"");
                    var myHeaders ={
                      timestamp:uploadParam.timestamp,
                      curUserId:uploadParam.userId,
                      referType:uploadParam.referType,
                      sign:uploadParam.sign
                    }

                    //封裝上傳圖片ajax
                    $.ajax({
                        //url: window.PATH + "/resource/file//uploadAdvPic",
                        url: window.PATH + uploadUrl,
                        type: "POST",
                        beforeSend: function(xhr) {
                            xhr.setRequestHeader("timestamp", myHeaders.timestamp);
                            xhr.setRequestHeader("curUserId", myHeaders.curUserId);
                            xhr.setRequestHeader("referType", myHeaders.referType);
                            xhr.setRequestHeader("sign", myHeaders.sign);
                        },
                        data: formData,
                        processData: false,  
                        contentType: false,  
                        success:function(data){
                          if (!data){
                            return false;
                          }else{
                            if (data.errorCode == -10){
                                layer.msg.error(data.message);
                                window.location.href = "#/login";
                                delCookie('account');
                                delCookie('token');
                                delCookie('userId');
                                delCookie('ucpType');
                                delCookie('roleName');
                            }else if (data.errorCode == -14){
                                layer.msg.error("用户登录已过期，请重新登录");
                                layer.close(loadInx);
                                window.location.href = "#/login";
                                delCookie('account');
                                delCookie('token');
                                delCookie('userId');
                                delCookie('ucpType');
                                delCookie('roleName');
                            }else if(data.errorCode == 0) {
                                //$(selector).attr("value",data.data.relativePath);
                                $(selector).attr("value",data.data.absolutePath);
                                return layer.msg.success("上传成功");
                            }else{
                                layer.msg.error(data.message);
                                $("#" + tableId + '-comContent-' + name).find(".dropify-preview").hide();
                                $("#" + tableId + '-comContent-' + name).find(".dropify-clear").hide();
                            }
                          }
                        },error:function(){
                          return layer.msg.error("上传失败");
                        }
                    });
                } else {
                    return layer.msg.error("无法预览图片");
                }
            });
        }
    }
}

//base64转二进制文件
function dataURItoBlob(dataURI) {
    var byteString = atob(dataURI.split(',')[1]);
    var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
    var ab = new ArrayBuffer(byteString.length);
    var ia = new Uint8Array(ab);
    for (var i = 0; i < byteString.length; i++) {
        ia[i] = byteString.charCodeAt(i);
    }
    return new Blob([ab], {type: mimeString});
}


//判断一个值是否不为空且有效
function isNotEmptyAndValid(value){
    if(value!=null || value || value!=undefined){
        if($.trim(value)!="" ){
            return true;
        }
    }
    return false;
}


//初始化modal内容和数据
function fillModalContent(tableId, type, number) {
    var $table = $("#" + tableId),
        $modal = $("#" + tableId + "-" + type),
        local = $table.data(KEY_TABLE_ITEMS),
        data = $table.data("queryData"),
        trs = local.trs,
        tableKey = local.tableKey,
        i18nPrefix = local.i18nPrefix,
        dataRow = number && data[number] ? data[number] : {};
    for (var i = 0, itemsLen = trs.length; i < itemsLen; i++) {
        var queryItem = trs[i],
            name = queryItem.name,
            comType = queryItem.comType,
            comData = queryItem.comData,
            selector = "#" + tableId + "-" + type + " [name=\"" + name + "\"]",
            // hideEdit = queryItem.hideEdit,
            disabled = queryItem.disabled,
            // hideEditFlag = hideEdit && (hideEdit=="A"||(hideEdit=="E" && type=="edit")||(hideEdit=="N" && type=="new")),
            disabledFlag = disabled && (disabled === "A" || (disabled === "E" && type === "edit") || (disabled === "N" && type === "new")),
            placeholder = getJsonData(i18nPrefix + name + ".help"),
            columnVal = undefined;
        if (type === "new" && queryItem.addDef) {
            columnVal = queryItem.addDef;
        } else if (type === "edit" && dataRow) {
            columnVal = dataRow[name];
            columnVal = (columnVal && queryItem.ratio) ? (columnVal / queryItem.ratio) : columnVal;
        }

        // if ($(selector).length === 0) {
        //     continue;
        // }
        if (comType === "select") {
            select2BaseImpl({
                params: comData,
                selector: selector,
                placeholder: placeholder
            });
            $(selector).val(columnVal).trigger("change");
            comData.selectE && comData.selectE();
        } else if (comType === "ajaxSelect") {
            select2DataImpl({
                params: queryItem.comDataS2,
                selector: selector,
                placeholder: placeholder,
                tableKeyVal: dataRow[tableKey],
                multiple: false//todo 多选的问题
            });
            // select2DataImpl(queryItem.comDataS2, selector, placeholder, dataRow[tableKey]);
            var colText = queryItem.comDataS2.editInit ? initEditS2Text(queryItem.comDataS2.url, columnVal, dataRow[tableKey]) : columnVal;
            $(selector).append("<option value='" + columnVal + "'>" + colText + "</option>");
            $(selector).val(columnVal).trigger("change");
        } else if(comType === "upload"){
            if (queryItem.uploadKey.uploadType == "img" && columnVal !== undefined){
                //相对路径
                //$(selector).attr("data-default-file","http://" + window.SUBPATH + '/'+ columnVal);

                //绝对路径
                if (columnVal === null){
                    $(selector).removeAttr("data-default-file");
                }else{
                    $(selector).attr("data-default-file","http://" + columnVal);
                    $(selector).attr("value",columnVal);
                }
            }
        } else if (comType === "checkbox") {
            if (columnVal){
                $(selector).attr("checked",true);
            }else{
                $(selector).attr("checked",false);
            }
        } else if (comType == "radio"){
            //直接初始化
            var radioValue,
                radioText,
                radioHtml;
            for (var i = 0; i < comData["data"].length; i++) {
                radioValue = comData["data"][i][0];
                radioText = comData["data"][i][1];
                radioHtml = '<label class="control control--radio">' + radioText + '<input type="radio" name="' + name + '" value="' + radioValue + '"/><div class="control__indicator"></div></label>'
                $("#edit-" + tableId  + '-' + name).append(radioHtml);
            }
            //赋值
            if (columnVal){
                $("input[value*='" + columnVal + "']").attr("checked",true);
            }
        } else {
            $(selector).val(columnVal);
        }
        disabledFlag && $modal.find('[name=' + name + ']').attr("disabled", "disabled");
    }

    if ($modal.find('[name=' + tableKey + ']').val() === undefined) {
        $modal.find('.' + tableId + tableKey).val(dataRow[tableKey]);
    }
    formChangeFlag = false;
}

//初始化批量编辑modal内容和数据
function fillBatchEditModalContent(tableId) {
    var $table = $("#" + tableId),
        // $modal = $("#"+tableId +"-batchEdit"),
        local = $table.data(KEY_TABLE_ITEMS),
        trs = local.trs,
        i18nPrefix = local.i18nPrefix;
    for (var i = 0, itemsLen = trs.length; i < itemsLen; i++) {
        var queryItem = trs[i],
            name = queryItem.name,
            comType = queryItem.comType,
            comData = queryItem.comData,
            selector = "#" + tableId + "-batchEdit [name=\"" + name + "\"]",
            // columnVal = "-",
            placeholder = getJsonData(i18nPrefix + name + ".help");
        if ($(selector).length === 0) {
            continue;
        }
        if (comType === "select") {
            select2BaseImpl({
                params: comData,
                selector: selector,
                placeholder: placeholder
            });
            $(selector).val(undefined).trigger("change");
        } else if (comType === "ajaxSelect") {
            select2DataImpl({
                params: queryItem.comDataS2,
                selector: selector,
                placeholder: placeholder
            });
            // select2DataImpl(queryItem.comDataS2, selector, placeholder);
            // $(selector).append("<option value='"+ columnVal +"'>"+ columnVal + "</option>");
            $(selector).val(undefined).trigger("change");
        } else {
            // $(selector).val(columnVal);
        }
    }
    formChangeFlag = false;
}


function getNowFormatDate() {
    var date = new Date();
    var seperator1 = "-";
    var seperator2 = ":";
    var month = date.getMonth() + 1;
    var strDate = date.getDate();
    if (month >= 1 && month <= 9) {
        month = "0" + month;
    }
    if (strDate >= 0 && strDate <= 9) {
        strDate = "0" + strDate;
    }
    var currentdate = date.getFullYear() + seperator1 + month + seperator1 + strDate
            + " " + date.getHours() + seperator2 + date.getMinutes()
            + seperator2 + date.getSeconds();
    return currentdate;
}


function initEditS2Text(url, value, tableKeyVal) {
    var params = {
        url: url,
        async: false,
        data: {editInit: value, tableKey: tableKeyVal},
        success: function (data) {
            if (data && data.data && data.data.items && data.data.items.length > 0) {
                if (data.data.items[0].id == value) {
                    return data.data.items[0].text;
                }
            }
            return undefined;
        }
    };
    var result = doTableAjax(params);
    return result ? result : getJsonData("label.tips.notFoundMatchedData") + value;
}

function showDialogModel(tableId, type) {
    var $editModal = $("body"),
        $header = $("#" + tableId + "-header");
    type = type || "detail";
    if (type === 'edit') {
        //$header.removeClass("text-success").addClass("text-primary").html("<i class=\"la la-edit\"></i> " + getJsonData("edit")).val("edit");
        $header.html(getJsonData("edit")).val("edit");
    } else if (type === 'new') {
        $header.html(getJsonData("new")).val("new");
    }
    type !== "details" && initEditFormValidator(tableId, type);
    $editModal = $('#' + tableId + "-" + type).modal({backdrop: 'static'});
    setTimeout(function () {
        $editModal.find("span.error").remove();
        $editModal.find("input.error").removeClass("error");
    }, 200);
}

function removeModal(tableId, type, isSave) {
    var closeModal = function () {
        $("#" + tableId + "-" + type).modal('hide');
        setTimeout(function () {
            $("#" + tableId + "-" + type).remove();
            $(".modal-backdrop").remove();
        }, 500);
    }
    if (type != "detail" && !isSave && formChangeFlag) {
        layer.confirm(getJsonData("frame.from.tips.confirmCancel"),{title:""}, function (idx) {
            layer.close(idx);
            closeModal();
            formChangeFlag = false;// reset flag
        });
    } else {
        closeModal();
        formChangeFlag = false;// reset flag
    }
}

function removeModalBetweenSkip(tableId, type) {
    $("#" + tableId + "-" + type).modal('hide');
    $("#" + tableId + "-" + type).remove();

    //去除时间等待 by sam
    /*setTimeout(function () {
        $("#" + tableId + "-" + type).remove();
    }, 500);*/
}

function skip2EditModalG(tableId) {
    //兼容火狐
    var theEvent = window.event || arguments.callee.caller.arguments[0];
    removeModalBetweenSkip(tableId, "detail");
    viewEditOrAdd(theEvent, tableId, "edit");
}

function skip2DetailModalG(tableId) {
    removeModalBetweenSkip(tableId, "edit");
    viewDetail(tableId);
}

var formChangeFlag = false;
function formChangeModal() {
    formChangeFlag = true;
}

function toolDelete(tableId) {
    var urlPrefix = $("#" + tableId).data(KEY_TABLE_ITEMS).initParams.urlPrefix,
        params = {
            url: window.PATH + urlPrefix + "delete",
            data: {idList: deleteRowsList(tableId)},
            success: function (resp) {
                queryTableDataModel(tableId);
            }
        };

    //超级用户无法删除by sam
    if (tableId == "frmuserTab"){
        var data = $("#"+tableId).data("queryData");
        var rows = getSelectedRows(tableId);
        if (data[rows].ucpUserType){
            layer.msg.error("无权删除该用户");
            return false;
        }
    }
    

    layer.confirm(getJsonData("frame.from.tips.confirmDel"),{title:""}, function () {
        doTableAjax(params)
    });
}

function toolSave(tableId, type) {
    //判断是否包含空格
    var formData = getSubmitData({tableId: tableId, type: type});
    /*for (var key in formData) {
        var reg =/\s/;
        var timeStr = /^(?:19|20)[0-9][0-9]-(?:(?:0[1-9])|(?:1[0-2]))-(?:(?:[0-2][1-9])|(?:[1-3][0-1])) (?:(?:[0-2][0-3])|(?:[0-1][0-9])):[0-5][0-9]:[0-5][0-9]$/
        //除时间格式外，其余有空格则报错
        if (reg.test(formData[key]) && !timeStr.test(formData[key])){
            layer.msg.error("内容包含空格，请重新输入");
            return false;
        }
    }*/

    //自定义oem创建总代时提示框！by sam
    var urlPrefix = $("#" + tableId).data("tableParams").initParams.urlPrefix,
        params = {
            url: window.PATH + urlPrefix + "save",
            data: formData,
            success: function (resp) {
                queryTableDataModel(tableId);
                removeModal(tableId, type, true);
            }
        };

    doTableAjax(params);
    /*if (type == "new" && urlPrefix.indexOf("/sysconfig/agentManager/") >=0 && getCookie("ucpType") == 1){
        layer.confirm('创建该代理商将从账户余额中每月扣除499.00元，确定要创建吗？', {
          btn: ['确认','取消'] 
        }, function(){
            layer.closeAll('dialog');
            doTableAjax(params);
        }, function(){
            layer.closeAll('dialog');
            return false;
        });
    }else{
        doTableAjax(params);
    }*/
}

function getSubmitData(params) {
    var tableId = params.tableId,
        type = params.type || "new",//|| $("#modal-"+tableId+"-type").val()
        $formId = $("#" + (params.formId || (tableId + "-" + type))),
        tableLocal = $("#" + tableId).data(KEY_TABLE_ITEMS),
        tableItems = tableLocal.trs,
        tableKey = tableLocal.tableKey,
        tableKeyVal = params.tableKeyVal || $formId.find("." + tableId + tableKey).val(),
        idList = $formId.find("[name=idList]").data("data-submit"),
        result = {};
    for (var i = 0, itemsLen = tableItems.length; i < itemsLen; i++) {
        var item = tableItems[i],
            name = item.name,
            hideEdit = item.hideEdit,
            batchEdit = item.batchEdit,
            numberFlag = item.vali &&
                (item.vali.integer || item.vali.number || item.vali.decimals || item.vali.digits),
            ratio = parseInt(item.ratio),
            inputVal = $formId.find("[name=" + name + "]").val();
        //去除前后空格
        inputVal = inputVal && inputVal.trim();
        //可以直接判断dom是否存在
        if ((type === "edit" && (hideEdit === "A" || hideEdit === "E")) ||
            (type === "new" && (hideEdit === "A" || hideEdit === "N")) ||
            (type === "batchEdit" && (!batchEdit || inputVal === "" || inputVal === undefined || inputVal === null))) {//$inputContainer.is(":hidden")
            continue;
        }
        if (inputVal === undefined || inputVal === null || inputVal === "") {//清空值
            inputVal = "";
            if (numberFlag) {
                inputVal = 0;
            }
        } else {
            if (ratio && !isNaN(ratio)) {
                //inputVal = inputVal * ratio;
                //取整数 sam ???
                inputVal = mul(inputVal,ratio);
            }
        }

        //上传图片时value
        var itemId = 'edit-' + tableId + '-' + name;
        if (item.comType == "upload"){
            result[name] = $("#" + itemId).attr("value");
        }else if (item.comType == "checkbox"){
            if ($("#" + itemId).attr("checked")){
                result[name] = 1;
            }else{
                result[name] = 0;
            }
        }else if (item.comType == "radio"){
            result[name] = $('input[name="'+ name +'"]:checked ').val();
        }else{
            result[name] = inputVal;
        }
    }
    //提交仅支持new和edit两种
    if (type !== "new") {
        type = "edit";
    }
    if (type === "edit" && (result[tableKey] === undefined || result[tableKey] === "")) {
        result[tableKey] = tableKeyVal;
    }
    if (idList) {
        result.idList = idList;
    }
    //result.actionName = getJsonData(type);
    result.actionName = type;
    return result;
}

function deleteRowsList(tableId) {
    var checkedsubList = $("input[name*='" + tableId + "-rowItems']:checked");
    var deleteIds = [];
    for (var i = 0; i < checkedsubList.length; i++) {
        var arr = checkedsubList[i].value.split("-|-");
        deleteIds[i] = arr[0];
    }
    return deleteIds;
}

function initEditFormValidator(tableId, type, submitFunction) {
    var tableItems = $("#" + tableId).data(KEY_TABLE_ITEMS).trs,
        fieldObj = createValidator(tableItems, type,tableId);
    // 初始化编辑框验证表单
    $('#' + tableId + "-" + type + "-form").bootstrapValidator({
        //不能过滤hidden，与select2控件相关有冲突 ????
        excluded: [':disabled',':hidden'],
        live: 'disabled',
        feedbackIcons: {
            // valid: 'glyphicon glyphicon-ok',
            // invalid: 'glyphicon glyphicon-remove',
            // validating: 'glyphicon glyphicon-refresh'
            valid: 'la la-check',
            invalid: 'la la-remove',
            validating: 'la la-refresh'
        },
        submitHandler: function (validator, form, submitButton) {
            toolSave(tableId, type);
        },
        fields: fieldObj
    });
}

//外部使用
function initFormValidators(params) {

    var data = {
        tableId: params.tableId || "",
        formId: params.formId || (tableId + "-edit-form"),
        fields: params.fields || {},
        submit: params.submit,
        type: params.type || "new"
    };
    var fieldObj = createValidator(data.fields,data.tableId);
    $('#' + data.formId).bootstrapValidator({
        excluded: [':disabled', ':hidden'],
        live: 'disabled',
        feedbackIcons: {
            // valid: 'glyphicon glyphicon-ok',
            // invalid: 'glyphicon glyphicon-remove',
            // validating: 'glyphicon glyphicon-refresh'
            valid: 'la la-check',
            invalid: 'la la-remove',
            validating: 'la la-refresh'
        },
        submitHandler: function (validator, form, submitButton) {
            data.submit ? data.submit(data.tableId) : toolSave(data.tableId, data.type);
        },
        fields: fieldObj
    });
}

//注意java integer类型的范围，最大值10位 2147483647
//type位batchEdit时，所有字段非必填
function createValidator(colsArr, type,tableId) {
    var itemLen = colsArr.length, fields = {};
        // languageObj = (window.LANGUAGE && window.LANGUAGE == "zh_CN") ? tableValidator_zh_CN : tableValidator_en_US;
    for (var i = 0; i < itemLen; i++) {
        var item = colsArr[i],
            name = item.name,
            vali = item.vali,
            hideEdit = item.hideEdit;

        var validator = {};

        //除上传图片外
        if (item.comType !== "upload"){
            //特殊字符
            validator.htmlChar = {};
            validator.htmlChar.message = getJsonData("bootstrapValidator.htmlChar");
        }else{
            if (!(vali && vali.required === false)) {
                if (!$("#edit-" + tableId + '-' + name).attr("value")){
                    validator.notEmpty = {};
                    validator.notEmpty.message = getJsonData("bootstrapValidator.required");
                }
            }
        }

        if (!(vali && vali.required === false) && type !== "batchEdit") {
            validator.notEmpty = {};
            validator.notEmpty.message = getJsonData("bootstrapValidator.required");
        }
        if (vali) {
            if (vali.noneSpace) {
                validator.noneSpace = {};
                validator.noneSpace.message = getJsonData("bootstrapValidator.noneSpace");
            }
            if (vali.emailAddress) {
                validator.emailAddress = {};
                validator.emailAddress.message = getJsonData("bootstrapValidator.emailAddress");
            }
            if (vali.phone) {
                validator.phone = {};
                validator.phone.message = getJsonData("bootstrapValidator.phone");
                validator.phone.country = "CN";
            }
            if (vali.uri) {
                validator.uri = {};
                validator.uri.message = getJsonData("bootstrapValidator.uri");
            }
            if (vali.date) {
                var dateFormat = vali.dateFormat ? vali.dateFormat : "yyyy-MM-dd HH:mm:ss";
                validator.date = {};
                validator.date.message = getJsonData("bootstrapValidator.date");
                validator.date.format = dateFormat;
            }
            if (vali.stringLength) {
                var min = vali.stringLength[0] ? vali.stringLength[0] : 0,
                    max = vali.stringLength[1] ? vali.stringLength[1] : vali.stringLength;
                if (min || max) {
                    var stringLength = {};
                    stringLength.max = max;
                    stringLength.min = min;
                    stringLength.message = getJsonData("bootstrapValidator.stringLength").replace("{0}", min).replace("{1}", max);
                    validator.stringLength = stringLength;
                }
            }
            if (vali.between) {
                var between = {};
                if (isArray(vali.between) && vali.between.length === 2) {
                    between.min = vali.between[0];
                    between.max = vali.between[1];
                } else {
                    between.min = 0;
                    between.max = vali.between[0] || vali.between || 0;
                }
                between.message = getJsonData("bootstrapValidator.between").replace("{0}", between.min).replace("{1}", between.max);
                validator.between = between;
            }
            if (vali.greaterThan) {
                var greaterThan = {};
                greaterThan.value = vali.greaterThan;
                greaterThan.inclusive = true;
                greaterThan.message = getJsonData("bootstrapValidator.greaterThan").replace("{0}", vali.greaterThan);
                validator.greaterThan = greaterThan;
            }
            if (vali.lessThan) {
                var lessThan = {};
                lessThan.value = vali.lessThan;
                lessThan.inclusive = true;
                lessThan.message = getJsonData("bootstrapValidator.lessThan").replace("{0}", vali.lessThan);
                validator.lessThan = lessThan;
            }
            if (vali.between || vali.numeric || vali.greaterThan || vali.lessThan) {
                validator.numeric = {};
                validator.numeric.message = getJsonData("bootstrapValidator.numeric");
            }
            if (vali.digits) {
                validator.digits = {};
                validator.digits.message = getJsonData("bootstrapValidator.digits");
            }
            if (vali.integer) {
                validator.integer = {};
                validator.integer.message = getJsonData("bootstrapValidator.integer");
            }
            if (vali.creditCard) {
                validator.creditCard = {};
                validator.creditCard.message = getJsonData("bootstrapValidator.creditCard");
            }
            if (vali.regexp) {
                validator.regexp = {};
                validator.regexp.regexp = vali.regexp;
                validator.regexp.message = vali.regexpTips ? vali.regexpTips : getJsonData("bootstrapValidator.regexp");
            }
            if (vali.decimals) {
                validator.decimals = {};
                validator.decimals.message = getJsonData("bootstrapValidator.decimals").replace("{0}", vali.decimals);
                validator.decimals.digits = vali.decimals;
            }
            if (vali.authNum) {
                validator.authNum = {};
                var remain = vali.authNum[0] ? vali.authNum[0] : 0;
                var total = vali.authNum[1] ? vali.authNum[1] : 0;
                validator.authNum.message = getJsonData("bootstrapValidator.authNum").replace("{0}", remain).replace("{1}", total);
                validator.authNum.remain = remain;
                validator.authNum.sum = total;
            }
            if (vali.authUrlFormat) {
                validator.authUrlFormat = {};
                validator.authUrlFormat.message = getJsonData("bootstrapValidator.authUrlFormat");
            }
            if(vali.zh===false){
                validator.zh = {};
                validator.zh.message = getJsonData("bootstrapValidator.zh");
            }
            //两次输入是否一致
            if(vali.identical){
                validator.identical = {};
                validator.identical.field = vali.identical;
                validator.identical.message = getJsonData("bootstrapValidator.identical");
            }
        }
        if (validator && !isEmptyObject(validator)) {
            var field = {};
            field.message = "default error message.";
            field.validators = validator;   
            fields[name] = field;
        }
    }
    return fields;
}


//获取cookies
function getCookie(name){
    var arr,reg=new RegExp("(^| )"+name+"=([^;]*)(;|$)");
    if(arr=document.cookie.match(reg))
    return unescape(arr[2]);
    else
    return null;
}

//设置cookies
function setCookie(name,value){
    var Days = 30;
    var exp = new Date();
    exp.setTime(exp.getTime() + Days*24*60*60*1000);
    document.cookie = name + "="+ escape (value) + ";expires=" + exp.toGMTString();
}

//删除cookies
function delCookie (name) {
    var exp = new Date();
    exp.setTime(exp.getTime() - 1);
    var cval = getCookie(name);
    if (cval != null)
        document.cookie = name + "=" + cval + ";expires=" + exp.toGMTString();
};


function getParameterByName(url,name) {
    name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
    results = regex.exec(url);
    return results == null ? "": decodeURIComponent(results[1]);
}



function setSignList(param,url){
    //console.log(param);
    //console.log(url);
    //固定参数
    //var pageSize = getParameterByName(url,"pageSize");
    //var pageNo  = getParameterByName(url,"pageNo");
    var token = getCookie("ucpToken");
    var referType = getCookie("ucpReferType");
    var userId = getCookie("ucpUserId");
    //var curUserId = getCookie("curUserId");
    var timestamp = new Date().getTime();

    //必填参数
    var sortList = ["referType","timestamp","curUserId"];

    /*if (pageSize != ""){
        sortList.push("pageSize");
    }
    if (pageNo != ""){
        sortList.push("pageNo");
    }*/
    
    //注入參數
    //for (key in param){
    //    /*if(param[key] !== undefined){
    //        sortList.push(key);
    //    }*/
    //    if (!sortList.contains(key)){
    //        sortList.push(key);
    //    }
    //}

    //排序 token放最后,必填
    sortList.sort();
    sortList.push("token"); 

    //深拷贝，不影响原有的参数
    //var paramCopy = $.extend(true,param);
    var paramCopy = {};
    /*if (pageSize != ""){
        paramCopy.pageSize = pageSize;
    }
    if (pageNo != ""){
        paramCopy.pageNo = pageNo;
    }*/

    paramCopy.token = token;
    paramCopy.referType = referType;
    paramCopy.curUserId = userId;
    paramCopy.timestamp = timestamp;

    var urlStr = "";
    for (var i=0;i<sortList.length;i++){
        if (i > 0){
            urlStr = urlStr + '&' + sortList[i] + '=' + paramCopy[sortList[i]];
        }else{
            urlStr = urlStr + sortList[i] + '=' + paramCopy[sortList[i]];
        }
    }
    console.log(urlStr);
    return {sign:CryptoJS.MD5(urlStr).toString(),userId:userId,timestamp:timestamp,referType:referType};
}


function doTableAjax(param) {
    var newParam = setSignList(param.data,param.url);
    /*param.data.sign = newParam.sign;
    param.data.referType = newParam.referType;
    param.data.userId = newParam.userId;
    param.data.timestamp = newParam.timestamp;
    */
    var loadInx = layer.load(2);
    var result = "";
    var urls = param.url;
    $.ajax({
        url: urls,
        beforeSend: function(xhr) {
            xhr.setRequestHeader("timestamp", newParam.timestamp);
            xhr.setRequestHeader("curUserId", newParam.userId);
            xhr.setRequestHeader("referType", newParam.referType);
            xhr.setRequestHeader("sign", newParam.sign);
        },
        /*headers: {
            timestamp: newParam.timestamp,
            userId:newParam.userId,
            referType:newParam.referType,
            sign:newParam.sign
        },*/
        type: param.type || "post",
        async: param.async === undefined ? true : param.async,
        timeout: param. timeout || 20000, // 超时时间设置，单位毫秒
        complete: param.complete || function (XMLHttpRequest, status) { // 请求完成后最终执行参数
            tableajaxComplete(XMLHttpRequest, status, loadInx);
        },// 请求完成后最终执行参数
        data: param.data || {},
        contentType: param.contentType, // 设置请求头信息
        dataType: param.dataType || "json",
        success: function (res) {
            /*
            hasNextPage   是否有后一页
            hasPreviousPage   是否有前一页
            lastPage   是否最后一页
            number   当前页数
            size    每页显示多少条 
            totalElements    总条数
            totalPages    总页数
            state:      状态码
            message:   状态信息
            */
            //console.log(res);
            if (res.errorCode == -10 ){
                // layer.msg.error(res.message);
                // layer.close(loadInx);
                delCookie('ucpAccount');
                delCookie('ucpToken');
                delCookie('ucpUserId');
                delCookie('ucpType');
                delCookie('ucpRoleName');
                window.location.href = "#/login";
            }

            if (res.errorCode == -14){
                //layer.msg.error("用户登录已过期，请重新登录");
                delCookie('ucpAccount');
                delCookie('ucpToken');
                delCookie('ucpUserId');
                delCookie('ucpType');
                delCookie('ucpRoleName');
                window.location.href = "#/login";
            }

            var format = {data:{contentList:[],hasNextPage:true,hasPreviousPage:true,lastPage:false,number:0,size:25,totalElements:0,totalPages:0},state:0,message:"",curtime:"",succeed: true}
            
            format.state = parseInt(res.errorCode);
            format.message = res.message;
            format.curtime = res.curtime;
            format.succeed = res.succeed;

            if (res.data != null){
                if (res.data.totalCount == null){
                    if (res.data.pageNo != res.data.totalPage && res.data.totalPage > 1){
                        format.data.hasNextPage = true;
                    }else{
                        format.data.hasNextPage = false;
                    }

                    if (res.data.pageNo != 1 && res.data.totalPage > 1){
                        format.data.hasPreviousPage = true;
                    }else{
                        format.data.hasPreviousPage = false;
                    }

                    if (res.data.pageNo == res.data.totalPage){
                        format.data.lastPage = true;
                    }else{
                        format.data.lastPage = false;
                    }

                    format.data.number = res.data.pageNo - 1;
                    format.data.size = res.data.pageSize;
                    format.data.totalElements = res.data.total;
                    format.data.totalPages = res.data.totalPage;
                    format.data.contentList = res.data.list;

                    if (res.data.trafficTotal){
                        format.data.trafficTotal = res.data.trafficTotal;
                    }

                    res = format;
                }else{
                    res.state = 0;
                }
            }
            try {
                if (res.state !== 0) {
                    layer.msg.error(getJsonData("label.common.error") + res.message);
                } else {
                    if (param.success){
                        result = param.success(res);
                    }
                        
                    //统计设备流量总流量
                    var Cts = param.url;
                    if( Cts.indexOf("/deviceFlow/list") >= 0 ){
                        if ($("#deviceDailyTab1-foot").length ){
                            var total;
                            $("#totalFlow").remove();
                            if (res.data.trafficTotal){
                                total = (res.data.trafficTotal)/1024;
                            }else{
                                total = 0;
                            }
                            var totalHtml = '<span id="totalFlow">统计总流量：<span class="" style="border-radius:2px;color:#fff;padding:5px;width:100%;background: #1989fa;border-color: #1989fa;">' + (total).toFixed(3) +'M</span></span>';
                            $("#deviceDailyTab1-foot").append(totalHtml);
                        }
                    }

                    //res.message && layer.msg.success(res.message);
                    res.message;

                    //删除提示
                    if (param.url.indexOf("delete") > 0){
                        layer.msg.success("删除成功");
                    }
                }
                //layer.close(loadInx);
            } catch (e) {
                //layer.close(loadInx);
            }
        },
        /*success: function (res) {
            try {
                if (res.state !== 0) {
                    layer.msg.error(getJsonData("label.common.error") + res.message);
                } else {
                    if (param.success)
                        result = param.success(res);
                        
                    //统计设备流量总流量
                    var Cts = param.url;
                    if( Cts.indexOf("/count/deviceDaily/devlist.ajax") > 0 ){
                        if ($("#deviceDailyTab1-foot").length ){
                            $("#totalFlow").remove();
                            var totalHtml = '<span id="totalFlow">统计总流量：<span class="" style="">' + res.data.totalFlow/1000 +'M</span></span>';
                            $("#deviceDailyTab1-foot").append(totalHtml);
                        }
                    }

                    res.message && layer.msg.success(res.message);
                }
                //layer.close(loadInx);
            } catch (e) {
                //layer.close(loadInx);
            }
        },*/
        error: function (res) {
            var msg = ( res && res.responseJSON ) ? res.responseJSON.message : res.message;
            layer.msg.error(getJsonData("label.common.error")+ msg);
            layer.close(loadInx);
        }
    });
    /*layer.close(loadInx);
    var result = {"data":{"number":0,"lastPage":true,"size":25,"hasNextPage":false,"totalPages":1,"hasPreviousPage":false,"contentList":[{"createdBy":"_EUROOT","createdTime":"2015-11-20 14:25:29","email":"admin","idxGroupId_tbGroup":"/","idxOwnerId":"eu.","idxRoleId_tbRole":"admin","keyUserId":"admin","language":"zh_CN","lastLoginArea":"","lastLoginIP":"0:0:0:0:0:0:0:1","lastLoginTime":"2017-12-05 18:57:53","locked":0,"loginFailTimes":0,"loginTimes":4433,"modifiedBy":"admin","modifiedTime":"2017-08-02 09:46:45","password":"f630a7ed05f34802b5e558ab6851ea2e","phoneNumber":"admin","remarks":"admin","state":1,"type":0},{"createdBy":"admin","createdTime":"2017-09-27 16:43:00","email":"","idxGroupId_tbGroup":"/","idxOwnerId":"eu.","idxRoleId_tbRole":"apiUser","keyUserId":"apiUser","language":"","lastLoginArea":"","lastLoginIP":"183.39.233.116","lastLoginTime":"2017-09-29 16:16:22","locked":0,"loginFailTimes":0,"loginTimes":5,"modifiedBy":"admin","modifiedTime":"2017-09-27 16:43:00","password":"e10adc3949ba59abbe56e057f20f883e","phoneNumber":"","state":1,"type":1},{"createdBy":"admin","createdTime":"2017-09-27 17:04:50","email":"","idxGroupId_tbGroup":"/","idxOwnerId":"eu.","idxRoleId_tbRole":"apiUser","keyUserId":"chuzhong","language":"","lastLoginArea":"","lastLoginIP":"119.23.24.63","lastLoginTime":"2017-11-22 19:28:42","locked":0,"loginFailTimes":0,"loginTimes":14352,"modifiedBy":"admin","modifiedTime":"2017-09-27 17:04:50","password":"52f980fca7181b7a2f4051265a0a1546","phoneNumber":"","state":1,"type":1},{"createdBy":"admin","createdTime":"2017-11-27 11:02:23","email":"","idxGroupId_tbGroup":"/","idxOwnerId":"eu.","idxRoleId_tbRole":"体验角色","keyUserId":"test","language":"","lastLoginArea":"","lastLoginIP":"121.34.147.121","lastLoginTime":"2017-12-01 15:34:12","locked":0,"loginFailTimes":0,"loginTimes":6,"modifiedBy":"admin","modifiedTime":"2017-11-27 11:02:23","password":"e10adc3949ba59abbe56e057f20f883e","phoneNumber":"","remarks":"","state":1,"type":5},{"accessIPs":"-","createdBy":"admin","createdTime":"2017-10-13 14:36:13","idxGroupId_tbGroup":"-","idxOwnerId":"eu.","idxRoleId_tbRole":"agent","keyUserId":"test1","language":"zh","lastLoginArea":"","lastLoginIP":"0:0:0:0:0:0:0:1","lastLoginTime":"2017-12-02 16:53:09","locked":0,"loginFailTimes":0,"loginTimes":62,"modifiedBy":"admin","modifiedTime":"2017-10-13 14:36:13","password":"e10adc3949ba59abbe56e057f20f883e","phoneNumber":"13088850720","remarks":"-","state":99,"type":1},{"createdBy":"admin","createdTime":"2017-10-13 14:41:12","email":"","idxGroupId_tbGroup":"/","idxOwnerId":"eu.","idxRoleId_tbRole":"agentTest","keyUserId":"test2","language":"","lastLoginArea":"","lastLoginIP":"121.34.146.117","lastLoginTime":"2017-10-13 14:49:33","locked":0,"loginFailTimes":0,"loginTimes":3,"modifiedBy":"admin","modifiedTime":"2017-10-13 14:41:12","password":"e10adc3949ba59abbe56e057f20f883e","phoneNumber":"","state":1,"type":1},{"accessIPs":"-","createdBy":"admin","createdTime":"2017-10-25 17:43:59","idxGroupId_tbGroup":"-","idxOwnerId":"eu.","idxRoleId_tbRole":"agent","keyUserId":"test3","language":"zh","lastLoginArea":"","lastLoginIP":"121.35.210.189","lastLoginTime":"2017-10-26 11:07:18","locked":0,"loginFailTimes":0,"loginTimes":3,"modifiedBy":"admin","modifiedTime":"2017-10-25 17:43:59","password":"e10adc3949ba59abbe56e057f20f883e","phoneNumber":"13088850720","remarks":"-","state":99,"type":1},{"accessIPs":"-","createdBy":"test3","createdTime":"2017-10-25 17:48:08","idxGroupId_tbGroup":"-","idxOwnerId":"eu.","idxRoleId_tbRole":"agent","keyUserId":"test4","language":"zh","lastLoginArea":"","lastLoginIP":"121.35.210.189","lastLoginTime":"2017-10-26 11:16:05","locked":0,"loginFailTimes":0,"loginTimes":5,"modifiedBy":"test3","modifiedTime":"2017-10-25 17:48:08","password":"e10adc3949ba59abbe56e057f20f883e","phoneNumber":"13088850720","remarks":"-","state":99,"type":1},{"accessIPs":"-","createdBy":"admin","createdTime":"2017-11-29 15:08:35","idxGroupId_tbGroup":"-","idxOwnerId":"eu.","idxRoleId_tbRole":"agent","keyUserId":"test5","language":"zh","lastLoginArea":"","lastLoginIP":"121.34.145.225","lastLoginTime":"2017-11-30 15:32:10","locked":0,"loginFailTimes":0,"loginTimes":3,"modifiedBy":"admin","modifiedTime":"2017-11-29 15:08:35","password":"e10adc3949ba59abbe56e057f20f883e","phoneNumber":"0","remarks":"-","state":99,"type":1}],"totalElements":9},"message":"","state":0}
    tableajaxComplete(XMLHttpRequest, 'success', loadInx);*/
    return result;
}

var tableIsDown = false;
var tableIsDraggle = false;
var tableStartLeft = 9999;
var tableResizeWidth = 0;
var tableStartColumnName = "";
function thOnMouseDownModel(tableId, columnName) {
    //兼容火狐浏览器
    var theEvent = window.event || arguments.callee.caller.arguments[0];
    if (!tableIsDraggle)return;
    var $table = $("#" + tableId),
        $body = $("body"),
        $drpLine = $("#datagrid-resize-proxy");
    var top = $table.offset().top,
        left = theEvent.clientX,
        height = $table.height();
    tableStartLeft = left;
    tableStartColumnName = columnName;
    tableIsDown = true;
    $drpLine.attr("style", "display: block; height: " + height + "px; left: " + left + "px; top: " + top + "px;");// show().css()
    // 按下 禁止选择文本
    $body.css({"-moz-user-select": "none", "-webkit-user-select": "none", "user-select": "none"});
}

function thOnMouseMoveModel(tableId) {
    //兼容火狐浏览器
    var theEvent = window.event || arguments.callee.caller.arguments[0];
    tableIsDraggle = theEvent.offsetX > theEvent.target.offsetWidth - 4 && theEvent.target.localName == "th";
    if (theEvent.target.localName == "th") {
        theEvent.target.style.cursor = theEvent.offsetX > theEvent.target.offsetWidth - 4 ? 'col-resize' : 'default';
    }else{
        theEvent.target.style.cursor = 'default';
    }
    if (tableIsDown) {
        var $drpLine = $("#datagrid-resize-proxy");
        var th_width = $("#th-" + tableId + "-" + tableStartColumnName).width() - 7;
        tableResizeWidth = theEvent.clientX - tableStartLeft + th_width;
        if (tableResizeWidth > 40) {
            $drpLine.css("left", theEvent.clientX + 4);// 避免挡住
        }
    }
}

function thOnMouseUpModel(tableId) {
    if (!tableIsDown) return;
    if (tableResizeWidth < 40) {
        tableResizeWidth = 40
    }

    var tableItems = $("#" + tableId).data(KEY_TABLE_ITEMS),
        items = tableItems.trs,
        len = items.length;
    for (var i = 0; i < len; i++) {
        var name = items[i].name;
        if (name == tableStartColumnName) {
            items[i].width = tableResizeWidth;
            tableItems.trs = items;
            setLocalStorageModel(tableId, "tableParams", tableItems);
            createTabEntityById(tableId);
        }
    }
    var $body = $("body");
    var $drpLine = $("#datagrid-resize-proxy");
    $drpLine.hide();
    // 抬起 恢复选择文本
    $body.css({"-moz-user-select": "text", "-webkit-user-select": "text", "user-select": "text"});
    tableIsDown = false;
    tableIsDraggle = false;
    tableStartLeft = 9999;
    tableResizeWidth = 0;
    tableStartColumnName = "";
}
       





//bunble

function Utils() {
}
window.Utils = Utils;
// ***js下载特定内容
function fake_click(obj) {
    var ev = document.createEvent("MouseEvents");
    ev.initMouseEvent(
        "click", true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null
    );
    obj.dispatchEvent(ev);
}

Utils.export_raw = function (name, data) {
    var urlObject = window.URL || window.webkitURL || window;
    var exportBlob = new Blob(["\ufeff" + data], {type: 'text/csv,charset=UTF-8'});
    var saveLink = document.createElementNS("http://www.w3.org/1999/xhtml", "a");
    saveLink.href = urlObject.createObjectURL(exportBlob);
    saveLink.download = name;
    fake_click(saveLink);
};

// 获得字符串在html中的宽度~
Utils.getStrHtmlWidth = function (str, fontSize) {
    var $getStrWidth = $("<span style='display:none;font-size:" + (fontSize || 12) + "px;'>" + str + "</span>");
    $("body").append($getStrWidth);
    var w = $getStrWidth.width();
    $getStrWidth.remove();
    return w;
};

/**
 * 用key获得selData的值
 * @param selData  selData 的二位数组
 * @param key
 */
Utils.getSelVal = function (selData, key) {
    if (!_.isArray(selData)) throw new Error("selData 需要是一个有2个元素的数组!!");
    for (var i = 0; i < selData.length; i++) {
        var obj = selData[i];
        if (obj[0] === key) {
            return obj[1];
        }
    }
    return null;
};
/**
 * 对象属性调用,字符串方式调用对象的属性,     避免使用eval,因为eval速度太慢了.
 * @param obj  对象
 * @param property   属性调用字符串,例: "person.lehman.name"
 */
Utils.objInvoke = function (obj, property) {
    var currentObj = obj;
    var packList = property.split(".");// 名称切割为类似 包名.的层次
    for (var i = 0; i < packList.length; i++) {
        var pack = packList[i];
        try {
            currentObj = currentObj[pack];// 像链表一样,向下走
        } catch (e) {
            console.log("Utils.objInvoke()," + packList[i - 1] + "." + pack + ",属性调用错误");
            return undefined;
        }
    }
    return currentObj;
};


/**
 * 2017.02.17
 * 对象属性调用,字符串方式调用对象的属性
 * 由于语言文件JSON格式改变，解析方式也做了调整
 * @param obj  对象
 * @param property   属性调用字符串,例: "person.lehman.name"
 */
Utils.objInvoke1 = function (obj, property) {
    var currentObj = obj;

    currentObj = currentObj[property]


    var packList = property.split(".");// 名称切割为类似 包名.的层次
    for (var i = 0; i < packList.length; i++) {
        var pack = packList[i];
        try {
            currentObj = currentObj[pack];// 像链表一样,向下走
        } catch (e) {
            console.log("Utils.objInvoke()," + packList[i - 1] + "." + pack + ",属性调用错误");
            return undefined;
        }
    }
    return currentObj;
};

//***********************************cookis **********************************
Utils.setCookie = function (name, value, daysTime) {
    var exp = new Date();
    exp.setTime(exp.getTime() + daysTime * 24 * 60 * 60 * 1000);
    document.cookie = name + "=" + escape(value) + ";expires=" + exp.toGMTString();
};
//读取cookies
Utils.getCookie = function (name) {
    var arr, reg = new RegExp("(^| )" + name + "=([^;]*)(;|$)");
    if (arr = document.cookie.match(reg))
        return unescape(arr[2]);
    else
        return null;
};
//删除cookies
Utils.delCookie = function (name) {
    var exp = new Date();
    exp.setTime(exp.getTime() - 1);
    var cval = getCookie(name);
    if (cval != null)
        document.cookie = name + "=" + cval + ";expires=" + exp.toGMTString();
};

//***********************************其他一些插件**********************************
/**
 * ladate 日期插件angular 包装
 * @param options   ladate 参数
 */
Utils.laydate = function (options, $event) {
    var formatStr = (options && options.format)?options.format:'yyyy-MM-dd HH:mm:ss';
    var op = {
        istime: true, //是否开启时间选择
        format:  formatStr//日期格式
    };
    laydate.call(this, $.extend(op, options))
    // laydate();
};

/**
 * @description:在规定时间内,只执行一次代码,避免短时间内重复执行(闭包TimeOut)
 * @return 例: var runTimeOut = Utils.TimeOutOne(500,func);使用 runTimeOut();
 */
Utils.TimeOutOne = function (time, func) {
    var index = null;
    return function () {
        index && clearTimeout(index);
        index = setTimeout(func, time);
    };
};

/**
 * 获取url中的参数,静态页面之间的传值 request.getParameter("dataName");
 */
Utils.request = {
    getParameter: function (val) {
        var uri = window.location.href;
        var re = new RegExp("" + val + "=([^&?]*)", "ig");
        return uri.match(re) ? uri.match(re)[0].substr(val.length + 1) : null;
    }
};

/**
 * js生成bootstrap  page  使用方式：<span ng-html="Utils.pagination(view.userPage,'changePage')"></span>
 * @param page page
 * @param pageFun 页面改变js函数
 * @return 当前用户肤色样式
 */
Utils.pagination = function (page, pageFun) {
    page = page || {};
    pageFun = pageFun || "pageFun";
    var sb = "";
    var paginationSize = 5;
    var current = (page.number || page.number==0 )?(page.number+1):"";//page.number=0时会被判断为false
    var begin = Math.max(1, current - parseInt(paginationSize / 2));
    var end = Math.min(begin + (paginationSize - 1), page.totalPages);
    var size = page.size || "0";
    var totalEle = page.totalElements || "0";
    var totalPages = page.totalPages || "0";

    /**
     * 分页回调
     * @param no 第几页
     * @param size 每页显示多少条
     * @param pageFun pageFun
     * @return 字符串
     */
    function getAFunStr(no, size) {
        return "javascript:" + pageFun + "(" + no + "," + size + ");";
    }

    sb += "<div><ul class=\"pagination\">";

    if (page.hasPreviousPage) {
        sb += "<li><a class=\"pagination-btn\" page=\"1\" href=\"" + getAFunStr(1, size) + "\"><i class=\"la la-angle-double-left\"></i></a></li>";
        sb += "<li><a class=\"pagination-btn\" href=\"" + getAFunStr(current - 1, size) + "\"><i class=\"la la-angle-left\"></i></a></li>";
    } else {
        sb += "<li class=\"disabled\"><a class=\"pagination-btn\" href=\"javascript:\"><i class=\"la la-angle-double-left\"></i></a></li>";
        sb += "<li class=\"disabled\"><a class=\"pagination-btn\" href=\"javascript:\"><i class=\"la la-angle-left\"></i></a></li>";
    }
    for (var i = begin; i < (end + 1); i++) {
        if (i == current) {
            sb += "<li class=\"active\"><a page=\"" + i + "\" href=\"javascript:\">" + i + "</a></li>";
        } else {
            sb += "<li><a class=\"pagination-btn-number\" href=\"" + getAFunStr(i, size) + "\">" + i + "</a></li>";
        }
    }
    if (page.hasNextPage) {
        sb += "<li><a class=\"pagination-btn\" href=\"" + getAFunStr(current + 1, size) + "\"><i class=\"la la-angle-right\"></i></a></li>";
        sb += "<li><a class=\"pagination-btn\" href=\"" + getAFunStr(page.totalPages, size) + "\"><i class=\"la la-angle-double-right\"></i></a></li>";
    } else {
        sb += "<li class=\"disabled\"><a class=\"pagination-btn\" href=\"javascript:\"><i class=\"la la-angle-right\"></i></a></li>";
        sb += "<li class=\"disabled\"><a class=\"pagination-btn\" href=\"javascript:\"><i class=\"la la-angle-double-right\"></i></a></li>"; //event.keyCode==13 && "+pageFun+"("+this.value+","+size+")
    }

    var pageNum = "<input style='width:30px;margin:1px 5px;' value='" + current + "' onkeydown='event.keyCode==13&&" + pageFun + "(this.value," + size + ")'>";
    sb += "<li class=\"disabled\"><a href=\"javascript:\">" + getJsonData("page_tools.tips", totalPages, totalEle) + "</a></li>";
    sb += "<li style=\"display:none\"><span style='padding:3px 12px;'>" + getJsonData("page_tools.goto_page", pageNum) + "</span></li>";
    sb += "<ul></div>";

    return sb;
};


/******************************窗口打开 iframe ****************************************/
/**
 * 打开iframe
 * @param url
 * @param title
 * @param width default 400
 * @param height default 600
 */
Utils.openWindow = function (url, title, width, height) {
    width = width || 400;
    height = height || 600;
    layer.open({
        type: 2,
        title: title,
        shadeClose: true,
        shade: false,
        maxmin: true, //开启最大化最小化按钮
        area: [width + 'px', height + 'px'],
        content: url
    });
};

/******************************jquery ajax的一点儿小包装****************************************/
var AJAX_TIMEOUT_TM = 20000;

$(document).ajaxError(function () {
    console.error(arguments);
});

/**
 * 2017.02.23 gaoyouan
 * 请求完成的回调函数，做了一些调整；
 * 对之前请求的兼容还需观察；
 * 后续，完善整个请求过程，完善包装；
 *
 * @param XMLHttpRequest
 * @param status
 * @param loadInx
 */
function ajaxComplete(XMLHttpRequest, status, loadInx) {
    layer.close(loadInx);
    if (status != 'success') {
        var errorMsg = status == 'parsererror' ? getJsonData("frame.tips.error.netWorkTimeout") : XMLHttpRequest.responseJSON.message;
        layer.msg.error(errorMsg);
        var isIntoLoginPage = status == "parsererror" && XMLHttpRequest.responseText.indexOf("login-container");
        /*if (isIntoLoginPage) {
            window.location.href = "#/login";
        }*/
        console.error(getJsonData("frame.tips.error.netWorkErrorInfo"));
        console.error(arguments);
    }
}

/**
 * jquery ajax的一点儿小包装
 * @param param jquery 一样的 对象参数, 不设置则包装方法默认的参数
 * @returns {{state: string}|*}
 */
Utils.ajax = function (param) {
    var loadInx = layer.load(2);
    var newParam = setSignList(param.data,param.url);
    /*param.data.sign = newParam.sign;
    param.data.referType = newParam.referType;
    param.data.userId = newParam.userId;
    param.data.timestamp = newParam.timestamp;*/
    if(param.async !== undefined){
        async = param.async;
    }else{
        async = true;
    }
    $.ajax({
        url: param.url,
        async:async,
        beforeSend: function(xhr) {
            xhr.setRequestHeader("timestamp", newParam.timestamp);
            xhr.setRequestHeader("curUserId", newParam.userId);
            xhr.setRequestHeader("referType", newParam.referType);
            xhr.setRequestHeader("sign", newParam.sign);
        },
        type: param.type || "post",
        timeout: param.timeout || AJAX_TIMEOUT_TM, //超时时间设置，单位毫秒
        complete: param.complete || function (XMLHttpRequest, status) { //请求完成后最终执行参数
            ajaxComplete(XMLHttpRequest, status, loadInx);
        },//请求完成后最终执行参数
        data: param.data || {},
        contentType: param.contentType, //设置请求头信息
        dataType: param.dataType || "json",
        success: function (res) {
            //封装ajax返回格式

            if (res.errorCode == -10 ){
                layer.msg.error(res.message);
                layer.close(loadInx);
                delCookie('ucpAccount');
                delCookie('ucpToken');
                delCookie('ucpUserId');
                delCookie('ucpType');
                delCookie('ucpRoleName');
                window.location.href = "#/login";
                return false;
            }

            if (res.errorCode == -14){
                layer.msg.error("用户登录已过期，请重新登录");
                layer.close(loadInx);
                delCookie('ucpAccount');
                delCookie('ucpToken');
                delCookie('ucpUserId');
                delCookie('ucpType');
                delCookie('ucpRoleName');
                window.location.href = "#/login";
                return false;
            }

            var format = {data:"",state:0,message:"",curtime:"",succeed: true}
            
            format.state = parseInt(res.errorCode);
            format.message = res.message;
            format.curtime = res.curtime;
            format.succeed = res.succeed;
            format.data = res.data;
            format.token = res.token;
            res = format;

            if (res.state != 0 && res.message){
                return layer.msg.error(res.message);
            }
         
            if (param.success) {
                param.success(res);
            }
            //res.message && layer.msg.success(res.message);
        }
    });
};


Utils.jsonp = function (param) {
    var loadInx = layer.load(2);
    $.ajax({
        url: param.url,
        dataType: "jsonp",
        jsonp: "jsonpcallback",
        timeout: param.timeout || AJAX_TIMEOUT_TM, //超时时间设置，单位毫秒
        complete: param.complete || function (XMLHttpRequest, status) { //请求完成后最终执行参数
            ajaxComplete(XMLHttpRequest, status, loadInx);
        },//请求完成后最终执行参数
        data: param.data || {},
        success: function (res) {
            try {
                if (res.state != 0)
                    return layer.msg.error("error:" + res.message);
            } catch (e) {
            }
            if (param.success) param.success(res);
            res.message && layer.msg.success(res.message);
        }
    });
};

// 同步的ajax
Utils.syncAjax = function (param) {
    var loadInx = layer.load(2);
    var result;
    $.ajax({
        url: param.url,
        type: param.type || "post",
        async: false,
        timeout: param.timeout || AJAX_TIMEOUT_TM, //超时时间设置，单位毫秒
        complete: param.complete || function (XMLHttpRequest, status) { //请求完成后最终执行参数
            ajaxComplete(XMLHttpRequest, status, loadInx);
        },//请求完成后最终执行参数
        data: param.data || {},
        dataType: param.dataType || "json",
        success: function (res) {
            try {
                if (res.state != 0)
                    return layer.msg.error("error:" + res.message);
            } catch (e) {
            }
            result = res;
            res.message && layer.msg.success(res.message);
        }
    });
    return result;
};
/**
 * 高亮html内容
 */
Utils.hiLiteContent = function (ctt, keyword) {
    if ((keyword = String(keyword)) && (ctt = String(ctt))) {
        var rgeKey = keyword.replace(/([\*\.\?\+\$\^\[\]\(\)\{\}\|\\\/])/g, '\\$1');
        var hlHtml = "<span style='background:#FFE792'>" + keyword + "</span>";
        ctt = ctt.replace(new RegExp(rgeKey, "g"), hlHtml);
    }
    return ctt;
};



//帮助页面助手

var HOME_URI = "#/home";
function Helps() {
}
/**
 * javascript 前端 js 国际化处理.
 *
 * $.i18n 或 $scope.i18n 都行
 *
 * 获得国际化值例子:  方式1: $.i18n("language")
 *                  方式2: $.i18n.map.language[""];    // 必须要带[""], 国际化文件转js JSON时,因为有可能有下级属性.所以值不能直接赋值,
 * 格式化输出例子 :  $.i18n("page_tools.tips", totalPages, totalEle)  // {0} {1}参数对应如下格式.
 */
Helps.i18nUtil = function () {
    $.ajax({
        url: '/static/language/' + window.LANGUAGE + ".json",
        type: "get", async: false,
        complete: function (res) {
            getJsonData = function (code) {
                var param = arguments, value = getI18N(code);
                // 格式化字符串 {0} {1} 对应参数2,参数3,
                return (param.length > 1) && value ? value.replace(/\{(.*?)\}/g, (p, num)=>param[num * 1 + 1]) : value;
            };
            getJsonData.map = JSON.parse(res.responseText);

            function getI18N(code) {
                try {
                    return Utils.objInvoke(getJsonData.map, code)[""];
                } catch (e) {
                    return null;
                }
            }
        }
    });
};

// 切换页面同步面包 导航标题
Helps.syncBreadcrumb = function () {
    // 获取
    var $active = $(".submenu .active span");
    var nameL1 = $active.closest(".menu-l1").find("> a span").html();
    var nameL2 = $active.html();
    // *** 写入
    var $breaLi = $(".breadcrumb > li:gt(0)");
    $breaLi.eq(0).find("a").html(nameL1 || getJsonData("menu.home"))
    $breaLi.eq(1)[nameL2 ? 'show' : 'hide']().find("a").html(nameL2);
};

// 侧边栏选择状态
var $menus = null;
Helps.navbarSelState = function () {
    $menus = $menus || $(".sidebar-menu li");
    $menus.removeClass("active");
    var route = /#.*/.exec(location.href)[0];
    if (route == HOME_URI) {
        $menus.eq(0).addClass("active");
    } else {
        var $thisMenuA = $menus.find("a[href='" + route + "']");
        // 选中的样式.
        $thisMenuA.closest("li").addClass("active").closest(".menu-l1").addClass("open");
    }
};


// bootstrap 模态框窗口 移动扩展, 在bootstrap 初始化后 调用
Helps.btModalMoveEx = function () {
    function moveEx($this) {
        var $head = $this.find(".modal-header"), $dialog = $this.find(".modal-dialog");
        var move = {isMove: false, left: 0, top: 0};
        $this.on("mousemove", function (e) {
            if (!move.isMove) return;
            $dialog.offset({top: e.pageY - move.top, left: e.pageX - move.left});
        }).on("mouseup", function () {
            move.isMove = false;
        });
        $head.on("mousedown", function (e) {
            move.isMove = true;
            var offset = $dialog.offset();
            move.left = e.pageX - offset.left;
            move.top = e.pageY - offset.top;
        });
    }

    var old = $.fn.modal;
    $.fn.modal = function (o, _r) {
        var $this = $(this);
        // 标识 是否已经绑定过移动事件了.用于防止重复绑定
        if (!$this.attr("isbindmv")) {
            $this.attr("isbindmv", "1");

            moveEx($this);
        }
        return old.call(this, o, _r);
    };
};


// 其他的一些jquery,初始化
Helps.initIndexAct = function () {
    if (!/#/.test(location.href)) {
        return location.href = HOME_URI;
    }
    // 用这个判断,angular 是否为初始化完成!!!未初始化,继续调用自身
    if ($(".sidebar-menu li").length < 3) {
        return setTimeout(initIndexAct, 200);
    }

    //*** 帮助搜索,帮助提示层的展示控制.
    var $helpTips = $(".searchhelper");
    $(".searchinput").focus(()=>$helpTips.show()).blur(()=>setTimeout(() =>$helpTips.hide(), 150));

    //*** 侧边导航,菜单展开高度控制
    var winHeight = document.documentElement.clientHeight;
    var headHeight = $(".navbar-header").height();

    //  Page Content 最小高度计算,因为侧边栏是跟随,page-content高度的,不设置的话,侧边栏会显示不完全!
    $(".page-content").css("min-height", winHeight - headHeight);
};
       
/**
 * 2016.6.16
 * gaoyouan
 * Eoutable Template Utils 表格工具类
 *
 *
 *
 */

// /**
//  * **************************** 中英文，验证提示语 模仿mycommen.js begin
//  */
// var tableValidator_zh_CN = {
//     "notEmpty": "必选字段",
//     "remote": "请修正该字段",
//     "emailAddress": "请输入正确格式的电子邮件",
//     "uri": "请输入合法的网址",
//     "date": "请输入合法的日期",
//     // "dateISO": "请输入合法的日期 (ISO).",
//     "numeric": "请输入合法的数字",
//     "integer": "只能输入整数（包括0，正整数和负整数）",
//     "decimals": "小数位不能超过{0}位数",
//     "authNum": "鉴权数量过载：剩余{0}，可鉴权总数{1}",
//     "authUrlFormat": "URL格式：协议(仅支持http和https)+地址+端口号(可省略)，英文冒号分隔",
//     "digits": "只能输入正整数",
//     "creditcard": "请输入合法的信用卡号",
//     // "equalTo": "请再次输入相同的值",
//     // "accept": "请输入拥有合法后缀名的字符串",
//     // "maxlength": "请输入一个长度最多是 {0} 的字符串",
//     // "minlength": "请输入一个长度最少是 {0} 的字符串",
//     "stringLength": "请输入一个长度介于 {0} 和 {1} 之间的字符串",
//     "between": "请输入一个介于 {0} 和 {1} 之间的值",
//     "lessThan": "请输入一个最大为 {0} 的值",
//     "greaterThan": "请输入一个最小为 {0} 的值",
//     "regexp": "输入值不符合正则表达式",
//     "htmlChar": "文本包含不允许的特殊字符，例如\"、\'、\>、\<、\\等"
// };
//
// var tableValidator_en_US = {
//     "notEmpty": "This field is required.",
//     "remote": "Please fix this field.",
//     "emailAddress": "Please enter a valid email address.",
//     "uri": "Please enter a valid URL.",
//     "date": "Please enter a valid date.",
//     // "dateISO": "Please enter a valid date ( ISO ).",
//     "numeric": "Please enter a valid number.",
//     "integer": "Please enter only integer.",
//     "decimals": "Decimal places, no more than {0} digits",
//     "authNum": "鉴权数量过载：剩余{0}，可鉴权总数{1}",
//     "authUrlFormat": "URL格式：协议(仅支持http和https)+地址+端口号(可省略)，英文冒号分隔",
//     "digits": "Please enter only digits.",
//     "creditcard": "Please enter a valid credit card number.",
//     // "equalTo": "Please enter the same value again.",
//     // "accept": "Please enter a string with a legitimate suffix",
//     // "maxlength": "Please enter no more than {0} characters." ,
//     // "minlength": "Please enter at least {0} characters." ,
//     "stringLength": "Please enter a value between {0} and {1} characters long.",
//     "between": "Please enter a value between {0} and {1}.",
//     "lessThan": "Please enter a value less than or equal to {0}.",
//     "greaterThan": "Please enter a value greater than or equal to {0}.",
//     "regexp": "The value you enter donesn't match the regexp. ",
//     "htmlChar": "text contains special characters,eg\" \' \> \< \\ .etc"
// };

var menuGroupComData =
    ["optgroup",
        ["主页", [["/index", "主页"], ["/home", "欢迎"], ["/login", "登录"], ["/logout", "注销"]]],
        ["基本设置", [["/frame/resource", "菜单页面"], ["/frame/user", "系统用户"], ["/frame/role", "角色权限"], ["/frame/blackList", "IP黑名单"], ["/frame/password", "修改密码"],
            ["/frame/audit", "操作审计"]]],
        ["系统管理", [["/sysconfig/configure", "系统配置"], ["/sysconfig/wifiArea", "地区管理"], ["/sysconfig/sMSTemplate", "短信模板"], ["/sysconfig/vns", "设备注册"],
            ["/sysconfig/version", "版本管理"], ["/sysconfig/sysSupplier", "供应商管理"], ["/sysconfig/agentManager", "代理商管理"], ["/sysconfig/consumerPkg", "消费套餐"]]],
        ["用户管理", [["/user/user", "注册用户"], ["/user/userTopupRcd", "充值记录"], ["/user/voicePkg", "语音套餐"], ["/user/dataPkg", "流量套餐"],
            ["/user/smsNew", "消息管理"], ["/user/feedback", "用户反馈"]]],
        ["数据业务", [["/vsw/vswExchangeSer", "卡交换服务"], ["/vsw/simPDevNew", "SimPool卡池"], ["/vsw/simCardNew", "流量卡管理"], ["/vsw/viFiDeviceNew", "UUWiFi设备"],
            ["/vsw/globalSIMNew", "启动卡管理"], ["/vsw/data-rate", "流量费率"], ["/vsw/cdrNew", "流量账单"]]],
        ["语音业务", [["/vpx/vpx", "软交换服务"], ["/vpx/trunk", "落地线路"], ["/vpx/outboundRoute", "呼叫路由"], ["/vpx/account", "注册的账号"], ["/vpx/online-user", "app在线分布图"],
            ["/vpx/goIPDevNew", "GoIP设备"], ["/vpx/rateNewVer", "通话费率"], ["/vpx/LaiXunAuth", "Sealion授权"]]],
        ["套餐管理", [["/packageConsume/dailyRental", "流量日租"], ["/packageConsume/trafficPkg", "流量套餐"], ["/packageConsume/consume", "流量资费"]]],
        ["统计报表", [["/count/countDaily", "每日统计"], ["/count/countMonthly", "月度统计"], ["/count/countAccessIP", "访问IP统计"]]],
        ["系统日志", [["/syslog/fs/webmin", "管理系统日志"], ["/syslog/fs/ws", "服务接口日志"], ["/syslog/fs/as", "计费系统日志"], ["/syslog/fs/api", "卡调度接口日志"],
            ["/syslog/fs/vns", "卡调度系统日志"], ["/syslog/fs/vsw", "卡交换系统日志"], ["/syslog/fs/vpx", "软交换呼叫日志"], ["/syslog/fs/msg", "消息系统日志"]]],

        ["分润对账管理", [["/user/user", "返佣对账"], ["/user/user", "流量对账"], ["/user/user", "分佣对账"]]]
    ];

/** **************************** 中英文，验证提示语 end ************************* */

/**
 * 数据来源于国际化字段comdata，查询value对应的别名（文本信息），一般用于转换显示信息格式
 *
 * @param i18nComdataKey
 *            国际化字段comdata的key值
 * @param value
 *            匹配comdata的value
 * @returns value对应的alias信息
 */
var matchComdata2Alias = function (i18nComdataKey, value) {
    var tipsData = getJsonData(i18nComdataKey),
        len = tipsData.length;
    for (var i = 0; i < len; i++) {
        var tipData = tipsData[i];
        if (tipData && tipData.length >= 2 && tipData[0].toString() === value.toString()) {
            return tipData[1];
        }
    }
    return value;
};
/**
 * 数据来源于Service，查询value对应的别名（文本信息），一般用于转换显示信息格式
 *
 * @params data service查询的key-value数组
 * @params value target value
 * @returns value对应的alias信息
 */
var matchServiceData2Alias = function (data, value) {
    var len = data.length,
        tipVal = "";
    for (var i = 0; i < len; i++) {
        var tipData = data[i];
        if (tipData[0].toString() === value.toString()) {
            tipVal = tipData[1];
            break;
        }
    }
    return tipVal;
};
/**
 * @params key, 值, 宽度, 默认颜色
 * data:    二位数组，子数组包含3段：value值/tips文本/color颜色
 * @notice 1.value允许大小写差异 2.default: width & defaultColor
 */
var matchData2FormatSpan = function (i18nComdataKey, value, width, defaultColor) {
    var data = getJsonData(i18nComdataKey);
    if (data === null || value === "" || value === undefined)
        return "";
    var len = data.length,
        width = width ? width : 50,
        defaultColor = defaultColor ? defaultColor : "default";
    for (var i = 0; i < len; i++) {
        var childData = data[i];
        if (childData && childData.length >= 3 && compareStrIngoreCase(childData[0], value)) {
            return "<span style='width:" + width + "px;' class='label label-" + childData[2] + "'>" + childData[1] + "</span>";
        }
    }
    return "<span style='width:" + width + "px;' class='label label-" + defaultColor + "'>" + value + "</span>";
};

/**
 * 将秒数转换成时间
 */
var valFormat_int2time = function (value) {
    var formatTime = function (time) {
        if (time < 10)
            time = "0" + time;
        return time;
    }
    value = parseInt(value);
    if (value || value.toString() === "0") {
        if (value < 60) {
            value = "00:00:" + formatTime(value);
        } else if (value < 3600) {
            var min = parseInt(value / 60);
            var sec = value % 60;
            value = "00:" + formatTime(min) + ":" + formatTime(sec);
        } else {
            var hour = parseInt(value / 3600),
                hourN = value % 3600,
                min = parseInt(hourN / 60),
                sec = hourN % 60;
            value = formatTime(hour) + ":" + formatTime(min) + ":" + formatTime(sec);
        }
    }
    return value;
};




/**
 * 取小数点后位数, 用0填充不够的小数位
 *
 * @params x target value
 * @params y 需要取的位数
 * @returns {Number}
 */
function toDecimals(value, digits) {
    var number = parseFloat(value);
    digits = parseInt(digits);
    if (isNaN(number) || isNaN(digits)) {
        return value;
    }
    var ratio = Math.pow(10, digits);
    number = Math.round(number * ratio) / ratio;

    var result = number.toString();
    var rs = result.indexOf('.');
    if (rs < 0) {
        rs = result.length;
        result += '.';
    }
    while (result.length <= rs + digits) {
        result += '0';
    }
    return result
}

/**
 * comdata to select2 data
 * 支持嵌套选项
 * [{text:"", children:[{id:"", text:""},...]},...]
 * [["fajldfj", [[1,2],[3,4]...]],...]
 */
function comdata2S2Data(comData) {
    var arr = [];
    if (comData && comData.length > 1 && comData[0] === "optgroup") {
        //comData = comData[1];
        for (var i = 1, leni = comData.length; i < leni; i++) {
            var comDataGrp = comData[i];
            if (comDataGrp && comDataGrp.length === 2) {
                var optiongrp = {};
                optiongrp.text = comDataGrp[0];
                var child = comDataGrp[1];
                var childArr = [];
                for (var j = 0, lenj = child.length; j < lenj; j++) {
                    var option = {};
                    option.id = child[j][0];
                    option.text = child[j][1];
                    childArr.push(option);
                }
                optiongrp.children = childArr;
            }
            arr.push(optiongrp);
        }
    } else {
        for (var k = 0, len = comData.length; k < len; k++) {
            var option = {};
            option.id = comData[k][0];
            option.text = comData[k][1];
            arr.push(option);
        }
    }
    return arr;
}


/**
 * jquery ajax的一点儿小包装:来源于commonUtils
 *
 * @param param
 *            jquery 一样的 对象参数, 不设置则包装方法默认的参数
 * @returns {{state: string}|*}
 */

//获取cookies

function Utils_ajax(param) {
    var loadInx = layer.load(2);
    var newParam = setSignList(param.data,param.url);

    /*param.data.sign = newParam.sign;
    param.data.userId = newParam.userId;
    param.data.referType = newParam.referType;
    param.data.timestamp = newParam.timestamp;*/
    $.ajax({
        url: param.url,
        beforeSend: function(xhr) {
            xhr.setRequestHeader("timestamp", newParam.timestamp);
            xhr.setRequestHeader("curUserId", newParam.userId);
            xhr.setRequestHeader("referType", newParam.referType);
            xhr.setRequestHeader("sign", newParam.sign);
        },
        type: param.type || "post",
        timeout: param.timeout || 20000, // 超时时间设置，单位毫秒
        async: param.async === undefined ? true : param.async,
        complete: param.complete || function (XMLHttpRequest, status) { // 请求完成后最终执行参数
            tableajaxComplete(XMLHttpRequest, status, loadInx);
        },// 请求完成后最终执行参数
        data: param.data || {},
        contentType: param.contentType, // 设置请求头信息
        dataType: param.dataType || "json",
        success: function (res) {
            try {
                if (res.state.toString() !== "0")
                    return layer.msg.error("error:" + res.message);
            } catch (e) {
            }
            if (param.success)
                param.success(res);
            //res.message && layer.msg.success(res.message);
            res.message;
        }
    });
}

function tableajaxComplete(XMLHttpRequest, status, loadInx) {
    layer.close(loadInx);
    if (status !== 'success') {
        //var errorMsg = status === 'parsererror' ? getJsonData("frame.tips.error.netWorkTimeout") : XMLHttpRequest.responseJSON.message;
        var errorMsg = status === 'parsererror' ? getJsonData("frame.tips.error.netWorkTimeout") : "请求失败";
        layer.msg.error(errorMsg);
        /*var isIntoLoginPage = status === "parsererror" && XMLHttpRequest.responseText.indexOf("login-container");
        if (isIntoLoginPage) {
            location.href = window.PATH + "/login"
        }*/
        console.error(getJsonData("frame.tips.error.netWorkErrorInfo"));
        console.error(arguments);
    }
}

/**
 * SELECT2 Data Source : s2下拉框数据源实现类
 * @autor gya 2016.12.17
 * @param params
 *        tableId:
 *        selector:
 *        url:
 *        placeholder:
 *        allowClear
 *        colVal:
 *
 *        multiple：是否多选
 *        formatResult:
 *            params: data && data.id,data.text,...其他附加参数
 *        formatSelection: tongshang
 *        selectE:    function(e)
 *            params: e/event &&  e.data
 *        //
 *        wifiAreaFM: 使用wifiArea地区列表数据源
 *
 *    @param tableKeyVal 该条数据的主键值
 *        额外加上主键值，是为了在特定需要时，确定这条的数据的唯一性，方便定位查找和修改这条数据
 *        只在编辑框弹出，初始化时使用，故需要判断
 *
 */
function select2DataImpl(object) {
    var obj = object || {},
        params = obj.params,
        selector = obj.selector,
        placeholder = obj.placeholder,
        tableKeyVal = obj.tableKeyVal,
        multiple = obj.multiple;
// function select2DataImpl(params, selector, placeholder, tableKeyVal) {
    if (!(params && params.url && selector)) {
        return false
    }

    /*if (params.url.indexOf("areaS2Data.ajax") > 0){
        params.url = window.PATH + window.areaS2
    }
*/
    //完整地区的格式化:id-下拉框选项和结果
    if (params.wifiAreaFM) {
        params.formatResult = wifiAreaS2Format;
        params.formatSelection = wifiAreaS2Format;
    }
    if (object.selector == '#viFiDeviceNewTab4-searchArea [name="cx_LIKE-|-deviceGroupId"]' || object.selector == '#viFiDeviceNewTab4-searchArea [name="cx_LIKE-|-keyDataPkgID"]'){
        var url = object.params.url
        var reg = new RegExp("vifiImport","g");
        object.params.url = url.replace(reg,"");
    }
    var $selectDom = $(selector);
    $selectDom.select2({
        placeholder: params.placeholder || placeholder || "placeholder init failed.",
        language: window.LANGUAGE || params.language || "en_US",
        allowClear: params.allowClear || true,
        ajax: {
            url: params.url || "",
            delay: 250,
            dataType: 'json',
            type: "post",
            minimumInputLength: 0,
            minimumResultsForSearch: 8,
            data: function (data) {
                var result = {
                    //去除前后空格 by sam
                    query: $.trim(data.term),
                    pageNo: data.page || 1,
                    pageSize: data.pageSize || 20
                };
                //加入主键值
                if (tableKeyVal != null && tableKeyVal != "") {
                    result.tableKey = tableKeyVal;
                }
                //这里应该是动态获取，所以传入function更合适
                var qryData = params.queryParams;
                if (qryData) {
                    if (typeof qryData === "function") {
                        qryData = qryData();
                        for (var item in qryData) {
                            result[item] = qryData[item];
                        }
                    } else if (typeof qryData === "object") {
                        for (var item in qryData) {
                            result[item] = qryData[item];
                        }
                    }
                }

                /*var newParam = setSignList(result,params.url);*/
                /*result.sign = newParam.sign;
                result.userId = newParam.userId;
                result.referType = newParam.referType;
                result.timestamp = newParam.timestamp;*/
                return result;
            },
            /*beforeSend: function(xhr) {
                xhr.setRequestHeader("timestamp", newParam.timestamp);
                xhr.setRequestHeader("curUserId", newParam.userId);
                xhr.setRequestHeader("referType", newParam.referType);
                xhr.setRequestHeader("sign", newParam.sign);
            },*/
            processResults: function (data, params) {
                // parse the results into the format expected by Select2
                // since we are using custom formatting functions we do not need to
                // alter the remote JSON data, except to indicate that infinite
                // scrolling can be used
                params.page = params.page || 1;
                params.pageSize = params.pageSize || 20;
                return {
                    results: data.data.items,
                    pagination: {
                        more: (params.page * params.pageSize) < data.data.totalCount
                    }
                };
            },
            cache: false
        },
        templateResult: params.formatResult || undefined,
        templateSelection: params.formatSelection || undefined
    });
    params.selectE && $selectDom.on("select2:select", params.selectE);
    //多选框：强行隐藏搜索框 & 增加placeholder
    multiple && $selectDom.parent().find(".select2-search--inline").hide();
    // multiple && $selectDom.parent().find(".select2-search--inline").hide();
    // multiple && $selectDom.parent().append('<div style="position: relative;left: 16px;top: -25px;color: #858585;font-size: 12px;">'+placeholder+'</div>');
}

/**
 * 固定数据的select2
 * @param object
 *  {
 *  params
 *  selector
 *  placeholder
 *  multiple
 *  }
 */
function select2BaseImpl(object) {
    var obj = object || {},
        params = obj.params,
        selector = obj.selector,
        placeholder = obj.placeholder,
        multiple = obj.multiple;
    if (!selector || !params || !params.data) {
        return false;
    }
    //支持嵌套的select
    var arrayData = comdata2S2Data(params.data);
    var $selectDom = $(selector);
    $selectDom.select2({
        minimumResultsForSearch: 8,//(multiple? Infinity:8),
        allowClear: true,
        placeholder: placeholder || undefined,
        data: arrayData || undefined,
        //data 可另外定义数据
        templateResult: params.formatResult || undefined,
        templateSelection: params.formatSelection || undefined
    });
    params.selectE && $selectDom.on("select2:select", params.selectE);
    //多选框：强行隐藏搜索框 & 增加placeholder
    multiple && $selectDom.parent().find(".select2-search--inline").hide();
    }
/**
 * 直接通过数组初始化S2控件
 * @param params
 */
function select2BaseImplByArray(params, selector, placeholder) {
    var $selectDom = $(selector);
    $selectDom.select2({
        minimumResultsForSearch: 8,
        allowClear: true,
        placeholder: placeholder || undefined,
        data: params.data || undefined,
        templateResult: params.formatter || undefined,
        templateSelection: params.formatter || undefined
    });
    params.selectE && $selectDom.on("select2:select", params.selectE);
    $selectDom.val("").trigger("change");
}

/**
 * select2:完整地区显示的 选项和结果format
 * td: 表格中的地区格式化
 * @param data
 * @returns
 */
function wifiAreaS2Format(data) {
    var keyAreaId = data && data.id;
    var areaHtml = wifiAreaTdFormat(keyAreaId);
    return $(areaHtml);
}
function wifiAreaTdFormat(keyAreaId) {
    if (keyAreaId && keyAreaId === "N")
        return "-";//getJsonData("label.common.unknownArea");
    if (keyAreaId) {
        var areas = keyAreaId.split("."),
            country = areas.length >= 3 ? getJsonData("country." + areas[2]) : "",
            region = areas.length >= 4 ? getJsonData("cn.region." + areas[3]) : "",
            regionAndCity = areas.length >= 5 ? getJsonData("cn." + areas[3] + "." + areas[4]) : "";
        //版本更替，面向客户时，不匹配的信息一律隐藏或者处理掉，保证界面显示的正确。面向测试则显示所有信息
        if (country || region || regionAndCity) {
            var result = country + (regionAndCity ? "-" + regionAndCity.replace(".", "-") : (region ? "-" + region : ""));
            return "<span><i class='img-country country-" + areas[2] + "'></i>" + result + "</span>";
        }
        return "<span>" + keyAreaId + "</span>";//getJsonData("tips.select2QueryFailed")+
    }
    return keyAreaId || "<span>" + getJsonData("db.common.wifiArea.help") + "</span>";
}


/** ****************************************************************************************************** */


/**
 * 定时器TimerID
 *
 * @utils 定义一个命名空间, 定义一个常量，存储上一次的TimerID !!没有做闭包处理，请不要直接操作TimerID getter &
 *        setter & clearTimer: 设置&获取TimerID & 清除此定时器
 */
var MULTI_TABLE_TEMPL = {};
MULTI_TABLE_TEMPL.timerID = 0;
MULTI_TABLE_TEMPL.setTimerID = function (timerID) {
    MULTI_TABLE_TEMPL.timerID = timerID;
}
MULTI_TABLE_TEMPL.getTimerID = function () {
    return MULTI_TABLE_TEMPL.timerID;
}
MULTI_TABLE_TEMPL.stopCurrentTimer = function () {
    var timerID = MULTI_TABLE_TEMPL.getTimerID();
    clearInterval(timerID);
    clearTimeout(timerID);
    MULTI_TABLE_TEMPL.setTimerID(0);
}
// 关闭旧的timer，同时更新新的timerID——常用
MULTI_TABLE_TEMPL.stopAndUpdateTimer = function (timerID) {
    MULTI_TABLE_TEMPL.stopCurrentTimer();
    MULTI_TABLE_TEMPL.setTimerID(timerID);
}


/*********  伸缩详情页面 ********************/
/**
 * API
 * {
     *  id: id,
     //*    size:   size,
     *  data:   [
     *      {
     *   title:,
     *   data: function/string/object,
     *   remoteData: options( object params for ajax, ),
     *   formatter: ,
     *   }
     *  ],
     *
     */
    // modal结构的部分可以抽象出来
var createFlexDetailModal = function (options) {
        if (!(options && options.id && isArray(options.data)) || $("#" + options.id).length != 0)
            return;
        var id = options.id,
            commonKey = options.key,
            data = options.data,
            size = data.length;
        var $modal = $([
            '<div class="modal fade modal-primary " id="' + id + '"  role="dialog" aria-hidden="true">',
            '<div class="modal-dialog">',
            '<div class="modal-content">',
            '<div class="modal-header">',
            '<button type="button" class="close" data-dismiss="modal" aria-label="Close">',
            '<span aria-hidden="true">&times;</span></button>',
            '<h4 class="modal-title text-info"><i class="fa fa-list-alt" ></i>' + getJsonData("details") + '</h4>',
            '</div>',
            '<div class="modal-body bg-white no-padding" style="overflow-y:auto;max-height: 80vh;"></div>',
            '<div class="modal-footer">',
            '<button class="btn btn-danger" data-dismiss="modal" aria-label="Close">' + getJsonData("close") + '</button>',
            '</div>',
            '</div>',
            '</div>',
            '</div>'
        ].join(''));
        $("#pageDiv").append($modal);
        var $container = $("#" + id).find(".modal-body");
        for (var i = 0; i < size; i++) {
            var $detailPart = $([
                '<div class="detailParts">',
                '<div class="detailPartHeader"  data-expand="false" style="font-size: 14px;padding: 4px 12px;margin-left:3.56px;">',
                '<i class="fa fa-plus-square"></i>',
                '<i class="fa fa-minus-square" style="display:none"></i>',
                '<span></span>',
                '</div>',
                '<div class="detailPartBody" style="display:none">',
                '<table class="table table-bordered table-striped">',
                '<tbody></tbody>',
                '</table>',
                '</div>',
                '</div>'].join(''));
            $detailPart.find(".detailPartHeader span").append(i);
            $detailPart.find(".detailPartBody tbody").append(i);
            $container.append($detailPart);
        }
        $container.find(".detailParts").each(function (i, el) {
            var $header = $(this).find(".detailPartHeader"),
                $body = $(this).find(".detailPartBody"),
                obj = data[i],
                content = "";
            $header.find("span:first-of-type").html(obj.title);
            if (obj && typeof(obj.data) === "string") {
                content = obj.data;
            } else if (obj && typeof(obj.data) === "function") {
                content = obj.data();
            } else if (obj && typeof(obj.data) === "object") {
                content = initCommonDetailContent(obj.data, obj.i18n, obj.trs);
            }
            $body.find("tbody").html(content);
            $header.on("click", function () {
                var that = $(this),
                    expandFlag = that.data("expand");
                if (obj && obj.remoteData && !expandFlag) {
                    var remoteData = obj.remoteData,
                        key = remoteData.key ? remoteData.key : commonKey;
                    Utils.ajax({
                        url: window.PATH + remoteData.url,
                        type: obj.type || "post",
                        data: (typeof(key) === "function" ? key() : key),
                        success: function (res) {
                            res && $body.find("tbody").html(initCommonDetailContent(res.data, obj.i18n, obj.trs));
                        }
                    });
                }
                that.find("i").toggle();
                that.data("expand", !expandFlag);
                $body.slideToggle(250);
            });
        });
    };

/**
 * 构建详情实体
 * @returns {string|string}
 */
var initCommonDetailContent = function (dataRow, i18nPrefix, trs) {
    var html = "";
    for (var i = 0, len=trs.length; i < len; i++) {
        var name = trs[i].name,
            i18nKey = getJsonData(i18nPrefix + name) || getJsonData("db.common." + name),
            content = formatData2Html(i18nPrefix, trs[i], dataRow, false);
        html += "<tr class=\"ng-scope\"><td class=\"text-right\" width='32%'> " + i18nKey +
            ": </td><td class='right-border-none'><div style='word-wrap:break-word;word-break: break-all;' " +
            "class=\"f-p-tips f-p-tips-button\">" + content + "</div></td></tr>";
    }
    return html || ("<tr><td>" + getJsonData("label.table.noDataRecord") + "</td></tr>");
};

//show
function showFlexDetailModal(id) {
    $("#" + id).find(".modal-body").find(".detailParts").each(function (i, el) {
        var expandFlag = $(this).find(".detailPartHeader").data("expand");
        //强行先收起，再展开第一个
        if( expandFlag ){
            $(this).find(".detailPartHeader").trigger("click");
        }
        if( i===0 ){
            $(this).find(".detailPartHeader").trigger("click");
        }
    });
    $modal = $("#" + id).modal({backdrop: 'static'});
    //$("#"+ id).modal("hide");
}


/** ************************************************************************************************************************************************* */
/**
 * 上传下载 导出csv文件的方法，来源于../../assets/js/utils/commonUtils
 *
 * @param name
 * @param data
 * @returns
 */
function importCsvModel(tableId) {
    var $this = $("#" + tableId + "_importCsv");
    $this = $this ? $this[0] : undefined;
    if ($this.files.length) {
        var reader = new FileReader();
        reader.onload = function () {
            var csvStr = this.result;
            checkDevCsvFile(csvStr, tableId) && importCsvRequest(csvStr, tableId);
        };
        reader.readAsText($this.files[0]);
    }
    // 重置change事件
    $("#" + tableId + "_importCsv").replaceWith($("#" + tableId + "_importCsv").clone(true));
}
function importCsvRequest(csvStr, tableId) {
    var requestUrl = getLSDataChild(tableId, "urlPrefix");
    $.ajax({
        url: requestUrl + "/importCsv",
        type: "post",
        data: {csvStr: csvStr},
        success: function () {
            // return dosearch8('1'); //查询列表
        }, error: function () {

        }
    });
}
// vifidevicenew 单独用的方法，还需要抽象出来
function checkDevCsvFile(csvStr, tableId) {
    var tbI18n = getLocalStorageModel(tableId, "tableParams").i18nPrefix;

    //var tableCVSHead = ["keyDevID","idxViFiID","pwd","idxDevGrpID","idxVNSID","devState","idxAgentID","debugIdt",
    //  "hardwareVer","firmwareVer","softwareVer","idxUserId"];//抽象化，作为参数保留
    ////校验：通过表格参数校验
    //var tabCVSHeadLength = tableCVSHead.length;

    var CVS_HEAD = "keyDevID,idxViFiID,pwd,idxDevGrpID,idxVNSID,devState,idxAgentID,debugIdt,hardwareVer," +
            "firmwareVer,softwareVer,idxUserId",
        CVS_HEAD_LEN = 12;
    var csvRows = csvStr.split(/\r\n|\r|\n/);
    var csvRow1 = csvRows[0] || "";
    if (csvRow1 != CVS_HEAD) {
        layer.msg.error("csv data error, title = " + CVS_HEAD);
        return false;
    }
    // for (var i = 1; i < csvRows.length; i++) {
    //     var csvRow = csvRows[i];
    //     var row = csvRow.split(",");
    //     if(",,,,,,,,,," == row || row ==""){
    //         continue;
    //     }
    //     if (row.length != CVS_HEAD_LEN && row.length != 1) {
    //         layer.msg.error("csv data error, data line:" + (i + 1) + " error :" + csvRow + ",row len" + row.length);
    //         return false;
    //     }
    //     // VNS 服务器
    //     var vnsSelData = selectPermissionsInfo.vnsSelData;
    //     if (isRowBoolean(vnsSelData, row[4])) {
    //         layer.msg.error("csv data error, data line:" + (i + 1) + " error : idxVNSID");
    //         return false;
    //     }
    //     // 状态
    //     var i18nTextQryType = getJsonData(tbI18n + "devState.comData");
    //     if (isRowBoolean(i18nTextQryType, row[5])) {
    //         layer.msg.error("csv data error, data line:" + (i + 1) + " error : devState");
    //         return false;
    //     }
    //     // 代理商
    //     var agentSelData = selectPermissionsInfo.agentSelData;
    //     if (isRowBoolean(agentSelData, row[6])) {
    //         layer.msg.error("csv data error, data line:" + (i + 1) + " error : idxAgentID");
    //         return false;
    //     }
    //     // 硬件版本
    //     var hardwareVerSelData = selectPermissionsInfo.hardwareVerSelData;
    //     if (isRowBoolean(hardwareVerSelData, row[8])) {
    //         layer.msg.error("csv data error, data line:" + (i + 1) + " error : hardwareVer");
    //         return false;
    //     }
    //     // 固件版本
    //     var firmwareVerSelData = selectPermissionsInfo.firmwareVerSelData;
    //     if (isRowBoolean(firmwareVerSelData, row[9])) {
    //         layer.msg.error("csv data error, data line:" + (i + 1) + " error : firmwareVer");
    //         return false;
    //     }
    //     // 系统版本
    //     var softwareVerSelData = selectPermissionsInfo.softwareVerSelData;
    //     if (isRowBoolean(softwareVerSelData, row[10])) {
    //         layer.msg.error("csv data error, data line:" + (i + 1) + " error : softwareVer");
    //         return false;
    //     }
    // }
    return true;
}

// function isRowBoolean(setData, rowVal) {
//     var flag = true;
//     try {
//         if (setData != null) {
//             for (var i = 0; i < setData.length; i++) {
//                 if (setData[i][0] == rowVal) {
//                     flag = false;
//                     break;
//                 }
//             }
//         }
//     } catch (e) {}
//     return flag;
// }

// function exportTempCsvModel(tableId){
//     var requestUrl = getLSDataChild(tableId, "urlPrefix")
//
//     $.ajax({
//         url: requestUrl + "exportTempCsv.ajax",
//         type:"post",
//         success: function(res) {
//             if(res && res.data){
//                 return exportRowModel(tableId+ 'Template.csv', res.data);
//             }
//             return layer.msg.error("No Data.");
//         }
//     });
// }

function exportCsvModel(tableId) {
    var tableParams = $("#" + tableId).data(KEY_TABLE_ITEMS);
    var localStrg = getLocalStorageModel(tableId, "localStrg"),
        sorts = localStrg.sorts || [];
    var searchParams = getSearchParamsAndSorts(tableId, tableParams.trs, sorts);
    Utils.ajax({
        //url: window.PATH + tableParams.initParams.urlPrefix + "exportCsv.ajax?pageSize=50000",//?pageSize=" + pageSize + "&page="+page
        url: window.PATH + tableParams.exportUrl + "?pageSize=50000",//?pageSize=" + pageSize + "&page="+page
        type: "post",
        data: searchParams,
        success: function success(res) {
            if (res && res.data) {
                return exportRowModel(tableId + new Date().format("yyyy-MM-dd_HH_mm_ss") + '.csv', res.data);
            }
            return layer.msg.error("No Data.");
        }
    });
}

//创建下载节点并模拟点击
var exportRowModel = function (name, data) {
    try{
        var elemIF = document.createElement("iframe");   
        elemIF.src = "http://" + data;   
        elemIF.style.display = "none";   
        document.body.appendChild(elemIF);   
    }catch(e){ 
        console.log(e);
        return layer.msg.error("导出失败");
    } 
    /*var urlObject = window.URL || window.webkitURL || window;
    var exportBlob = new Blob(["\ufeff" + data], {type: 'text/csv,charset=UTF-8'});
    var saveLink = document.createElementNS("http://www.w3.org/1999/xhtml", "a");
    saveLink.href = urlObject.createObjectURL(exportBlob);
    saveLink.download = name;
    var ev = document.createEvent("MouseEvents");
    ev.initMouseEvent(
        "click", true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null
    );
    saveLink.dispatchEvent(ev);*/
};

/** *********************************************************************************************** */

var InitiateSparklineCharts = function () {
    return {
        init: function () {

            /*Bar*/
            var sparklinebars = $('[data-sparkline=bar]');
            $.each(sparklinebars, function () {
                $(this).sparkline('html', {
                    type: 'bar',
                    disableHiddenCheck: true,
                    height: $(this).data('height'),
                    width: $(this).data('width'),
                    barColor: getcolor($(this).data('barcolor')),
                    negBarColor: getcolor($(this).data('negbarcolor')),
                    zeroColor: getcolor($(this).data('zerocolor')),
                    barWidth: $(this).data('barwidth'),
                    barSpacing: $(this).data('barspacing'),
                    stackedBarColor: $(this).data('stackedbarcolor')
                });
            });

            /*Line*/
            var sparklinelines = $('[data-sparkline=line]');
            $.each(sparklinelines, function () {
                $(this).sparkline('html', {
                    type: 'line',
                    disableHiddenCheck: true,
                    height: $(this).data('height'),
                    width: $(this).data('width'),
                    fillColor: getcolor($(this).data('fillcolor')),
                    lineColor: getcolor($(this).data('linecolor')),
                    spotRadius: $(this).data('spotradius'),
                    lineWidth: $(this).data('linewidth'),
                    spotColor: getcolor($(this).data('spotcolor')),
                    minSpotColor: getcolor($(this).data('minspotcolor')),
                    maxSpotColor: getcolor($(this).data('maxspotcolor')),
                    highlightSpotColor: getcolor($(this).data('highlightspotcolor')),
                    highlightLineColor: getcolor($(this).data('highlightlinecolor'))
                });
            });
            /*Composite Line*/
            var sparklinecompositelines = $('[data-sparkline=compositeline]');
            $.each(sparklinecompositelines, function () {
                $(this).sparkline('html', {
                    type: 'line',
                    disableHiddenCheck: true,
                    height: $(this).data('height'),
                    width: $(this).data('width'),
                    lineColor: getcolor($(this).data('linecolor')),
                    fillColor: getcolor($(this).data('fillcolor')),
                    spotRadius: $(this).data('spotradius'),
                    lineWidth: $(this).data('linewidth'),
                    spotColor: getcolor($(this).data('spotcolor')),
                    minSpotColor: getcolor($(this).data('minspotcolor')),
                    maxSpotColor: getcolor($(this).data('maxspotcolor')),
                    highlightSpotColor: getcolor($(this).data('highlightspotcolor')),
                    highlightLineColor: getcolor($(this).data('highlightlinecolor'))
                });
                $(this).sparkline(stringtoarray($(this).attr("data-composite")), {
                    type: 'line',
                    disableHiddenCheck: true,
                    height: $(this).data('height'),
                    width: $(this).data('width'),
                    lineColor: getcolor($(this).data('secondlinecolor')),
                    fillColor: getcolor($(this).data('secondfillcolor')),
                    lineWidth: $(this).data('secondlinewidth'),
                    spotRadius: $(this).data('spotradius'),
                    spotColor: getcolor($(this).data('spotcolor')),
                    minSpotColor: getcolor($(this).data('minspotcolor')),
                    maxSpotColor: getcolor($(this).data('maxspotcolor')),
                    highlightSpotColor: getcolor($(this).data('highlightspotcolor')),
                    highlightLineColor: getcolor($(this).data('highlightlinecolor')),
                    composite: true
                });
            });

            /*Composite Bar*/
            var sparklinecompositebars = $('[data-sparkline=compositebar]');
            $.each(sparklinecompositebars, function () {
                $(this).sparkline('html', {
                    type: 'bar',
                    disableHiddenCheck: true,
                    height: $(this).data('height'),
                    width: $(this).data('width'),
                    barColor: getcolor($(this).data('barcolor')),
                    negBarColor: getcolor($(this).data('negbarcolor')),
                    zeroColor: getcolor($(this).data('zerocolor')),
                    barWidth: $(this).data('barwidth'),
                    tooltipPrefix: $(this).data('prefix'),
                    tooltipSuffix: $(this).data('suffix'),
                    barSpacing: $(this).data('barspacing'),
                    stackedBarColor: getcolor($(this).data('stackedbarcolor'))
                });
                $(this).sparkline(stringtoarray($(this).attr("data-composite")), {
                    type: 'line',
                    height: $(this).data('height'),
                    disableHiddenCheck: true,
                    width: $(this).data('width'),
                    lineColor: getcolor($(this).data('linecolor')),
                    fillColor: getcolor($(this).data('fillcolor')),
                    spotRadius: $(this).data('spotradius'),
                    lineWidth: $(this).data('linewidth'),
                    spotRadius: $(this).data('spotradius'),
                    spotColor: getcolor($(this).data('spotcolor')),
                    tooltipPrefix: $(this).data('lineprefix'),
                    tooltipSuffix: $(this).data('linesuffix'),
                    minSpotColor: getcolor($(this).data('minspotcolor')),
                    maxSpotColor: getcolor($(this).data('maxspotcolor')),
                    highlightSpotColor: getcolor($(this).data('highlightspotcolor')),
                    highlightLineColor: getcolor($(this).data('highlightlinecolor')),
                    composite: true
                });
            });

            /*Tristate*/
            var sparklinetristates = $('[data-sparkline=tristate]');
            $.each(sparklinetristates, function () {
                $(this).sparkline('html', {
                    type: 'tristate',
                    disableHiddenCheck: true,
                    height: $(this).data('height'),
                    width: $(this).data('width'),
                    posBarColor: getcolor($(this).data('posbarcolor')),
                    negBarColor: getcolor($(this).data('negbarcolor')),
                    zeroBarColor: getcolor($(this).data('zerobarcolor')),
                    barWidth: $(this).data('barwidth'),
                    barSpacing: $(this).data('barspacing'),
                    zeroAxis: $(this).data('zeroaxis')
                });
            });

            /*Descrete*/
            var sparklinediscretes = $('[data-sparkline=discrete]');
            $.each(sparklinediscretes, function () {
                $(this).sparkline('html', {
                    type: 'discrete',
                    disableHiddenCheck: true,
                    lineHeight: $(this).data('lineheight'),
                    lineColor: getcolor($(this).data('linecolor')),
                    thresholdValue: $(this).data('thresholdvalue'),
                    thresholdColor: $(this).data('thresholdcolor')
                });
            });

            /*Bullet*/
            var sparklinebullets = $('[data-sparkline=bullet]');
            $.each(sparklinebullets, function () {
                $(this).sparkline('html', {
                    type: 'bullet',
                    disableHiddenCheck: true,
                    targetColor: $(this).data('targetcolor'),
                    performanceColor: $(this).data('performancecolor'),
                    rangeColors: $(this).data('rangecolors')
                });
            });

            /*Box Plot*/
            var sparklinebox = $('[data-sparkline=box]');
            $.each(sparklinebox, function () {
                $(this).sparkline('html', {
                    type: 'box',
                    disableHiddenCheck: true,
                });
            });

            /*Pie*/
            var sparklinepie = $('[data-sparkline=pie]');
            $.each(sparklinepie, function () {
                $(this).sparkline('html', {
                    type: 'pie',
                    disableHiddenCheck: true,
                    width: $(this).data('width'),
                    height: $(this).data('height'),
                    sliceColors: $(this).data('slicecolors'),
                    borderColor: getcolor($(this).data('bordercolor'))
                });
            });


        }
    };
}();

function stringtoarray(str) {
    var myArray = str.split(",");
    for (var i = 0; i < myArray.length; i++) {
        myArray[i] = +myArray[i];
    }
    for (var i = 0; i < myArray.length; i++) {
        myArray[i] = parseInt(myArray[i], 10);
    }
    return myArray;
}


//自定义加减乘除(解决js浮点数计算bug)

//加
function add(a, b) {
    var c, d, e;
    try {
        c = a.toString().split(".")[1].length;
    } catch (f) {
        c = 0;
    }
    try {
        d = b.toString().split(".")[1].length;
    } catch (f) {
        d = 0;
    }
    return e = Math.pow(10, Math.max(c, d)), (mul(a, e) + mul(b, e)) / e;
}


//减
function sub(a, b) {
    var c, d, e;
    try {
        c = a.toString().split(".")[1].length;
    } catch (f) {
        c = 0;
    }
    try {
        d = b.toString().split(".")[1].length;
    } catch (f) {
        d = 0;
    }
    return e = Math.pow(10, Math.max(c, d)), (mul(a, e) - mul(b, e)) / e;
}

//乘
function mul(a, b) {
    var c = 0,
        d = a.toString(),
        e = b.toString();
    try {
        c += d.split(".")[1].length;
    } catch (f) {}
    try {
        c += e.split(".")[1].length;
    } catch (f) {}
    return Number(d.replace(".", "")) * Number(e.replace(".", "")) / Math.pow(10, c);
}


//除
function div(a, b) {
    var c, d, e = 0,
        f = 0;
    try {
        e = a.toString().split(".")[1].length;
    } catch (g) {}
    try {
        f = b.toString().split(".")[1].length;
    } catch (g) {}
    return c = Number(a.toString().replace(".", "")), d = Number(b.toString().replace(".", "")), mul(c / d, Math.pow(10, f - e));
}





//***********************************扩展一些原生的方法**********************************
//---------------------------------------------------
// 日期格式化
// 格式 YYYY/yyyy/YY/yy 表示年份
// MM/M 月份
// W/w 星期
// dd/DD/d/D 日期
// hh/HH/h/H 时间
// mm/m 分钟
// ss/SS/s/S 秒
//---------------------------------------------------
Date.prototype.format = function (formatStr) {
    formatStr = formatStr || "yyyy-MM-dd HH:mm:ss";
    var str = formatStr;
    var Week = ['日', '一', '二', '三', '四', '五', '六'];
    var month = this.getMonth() + 1;
    str = str.replace(/yyyy|YYYY/, this.getFullYear());
    str = str.replace(/MM/, month > 9 ? month + '' : '0' + month);
    str = str.replace(/w|W/g, Week[this.getDay()]);
    str = str.replace(/dd|DD/, this.getDate() > 9 ? this.getDate().toString() : '0' + this.getDate());
    str = str.replace(/hh|HH/, this.getHours() > 9 ? this.getHours().toString() : '0' + this.getHours());
    str = str.replace(/mm/, this.getMinutes() > 9 ? this.getMinutes().toString() : '0' + this.getMinutes());
    str = str.replace(/ss|SS/, this.getSeconds() > 9 ? this.getSeconds().toString() : '0' + this.getSeconds());
    return str;
};

Date.prototype.Format = function (fmt) { //author: meizz
    var o = {
        "M+": this.getMonth() + 1,                 //月份
        "d+": this.getDate(),                    //日
        "h+": this.getHours(),                   //小时
        "m+": this.getMinutes(),                 //分
        "s+": this.getSeconds(),                 //秒
        "q+": Math.floor((this.getMonth() + 3) / 3), //季度
        "S": this.getMilliseconds()             //毫秒
    };
    if (/(y+)/.test(fmt))
        fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
    for (var k in o)
        if (new RegExp("(" + k + ")").test(fmt))
            fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
    return fmt;
};

/**
 ** 乘法函数，用来得到精确的乘法结果
 **/
Number.prototype.mul = function (num) {
    var m = 0, s1 = this.toString(), s2 = num.toString();
    try {
        m += s1.split(".")[1].length;
    }
    catch (e) {
    }
    try {
        m += s2.split(".")[1].length;
    }
    catch (e) {
    }
    return Number(s1.replace(".", "")) * Number(s2.replace(".", "")) / Math.pow(10, m);
};


/**
 ** 除法函数，用来得到精确的除法结果
 **/
Number.prototype.div = function (num) {
    var t1 = 0, t2 = 0, r1, r2;
    try {
        t1 = this.toString().split(".")[1].length;
    } catch (e) {
    }
    try {
        t2 = num.toString().split(".")[1].length;
    }
    catch (e) {
    }
    r1 = Number(this.toString().replace(".", ""));
    r2 = Number(num.toString().replace(".", ""));
    return (r1 / r2) * Math.pow(10, t2 - t1);
};
// ***************************************** 字符串
// 匹配结尾
String.prototype.endWith = function (str) {
    if (str == null || str == "" || this.length == 0 || str.length > this.length)
        return false;
    return this.substring(this.length - str.length) == str;
};
// 匹配开始
String.prototype.startWith = function (str) {
    if (str == null || str == "" || this.length == 0 || str.length > this.length)
        return false;
    return this.substr(0, str.length) == str;
};
//
String.prototype.contains = function (str) {
    return this.indexOf(str) > -1;
};


// ***************************************** 数组
// 批量设置数组中对象里的值
Array.prototype.setBatch = function (key, value) {
    for (var i = 0; i < this.length; i++) {
        var obj = this[i];
        if (obj == null && typeof(obj) != "object") {
            throw new Error("index:" + obj + " not object data error : " + JSON.stringify(obj));
        }
        obj[key] = value;
    }
    return -1;
};

//数组判断是否有某值
Array.prototype.contains = function (obj) {  
    var i = this.length;  
    while (i--) {  
        if (this[i] === obj) {  
            return true;  
        }  
    }  
    return false;  
}  
